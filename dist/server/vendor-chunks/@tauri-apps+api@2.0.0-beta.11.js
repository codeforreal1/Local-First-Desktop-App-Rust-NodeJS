"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tauri-apps+api@2.0.0-beta.11";
exports.ids = ["vendor-chunks/@tauri-apps+api@2.0.0-beta.11"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/app.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/app.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   getTauriVersion: () => (/* binding */ getTauriVersion),\n/* harmony export */   getVersion: () => (/* binding */ getVersion),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   show: () => (/* binding */ show)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Application metadata and related APIs.\n *\n * @module\n */ /**\n * Gets the application version.\n * @example\n * ```typescript\n * import { getVersion } from '@tauri-apps/api/app';\n * const appVersion = await getVersion();\n * ```\n *\n * @since 1.0.0\n */ async function getVersion() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:app|version\");\n}\n/**\n * Gets the application name.\n * @example\n * ```typescript\n * import { getName } from '@tauri-apps/api/app';\n * const appName = await getName();\n * ```\n *\n * @since 1.0.0\n */ async function getName() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:app|name\");\n}\n/**\n * Gets the Tauri version.\n *\n * @example\n * ```typescript\n * import { getTauriVersion } from '@tauri-apps/api/app';\n * const tauriVersion = await getTauriVersion();\n * ```\n *\n * @since 1.0.0\n */ async function getTauriVersion() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:app|tauri_version\");\n}\n/**\n * Shows the application on macOS. This function does not automatically focus any specific app window.\n *\n * @example\n * ```typescript\n * import { show } from '@tauri-apps/api/app';\n * await show();\n * ```\n *\n * @since 1.2.0\n */ async function show() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:app|app_show\");\n}\n/**\n * Hides the application on macOS.\n *\n * @example\n * ```typescript\n * import { hide } from '@tauri-apps/api/app';\n * await hide();\n * ```\n *\n * @since 1.2.0\n */ async function hide() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:app|app_hide\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9hcHAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW1DO0FBRW5DLHFFQUFxRTtBQUNyRSxzQ0FBc0M7QUFDdEMsK0JBQStCO0FBQy9COzs7O0NBSUMsR0FDRDs7Ozs7Ozs7O0NBU0MsR0FDRCxlQUFlQztJQUNYLE9BQU9ELGdEQUFNQSxDQUFDO0FBQ2xCO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBQ0QsZUFBZUU7SUFDWCxPQUFPRixnREFBTUEsQ0FBQztBQUNsQjtBQUNBOzs7Ozs7Ozs7O0NBVUMsR0FDRCxlQUFlRztJQUNYLE9BQU9ILGdEQUFNQSxDQUFDO0FBQ2xCO0FBQ0E7Ozs7Ozs7Ozs7Q0FVQyxHQUNELGVBQWVJO0lBQ1gsT0FBT0osZ0RBQU1BLENBQUM7QUFDbEI7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ0QsZUFBZUs7SUFDWCxPQUFPTCxnREFBTUEsQ0FBQztBQUNsQjtBQUU0RCIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvYXBwLmpzPzc5NDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52b2tlIH0gZnJvbSAnLi9jb3JlLmpzJztcblxuLy8gQ29weXJpZ2h0IDIwMTktMjAyNCBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLyoqXG4gKiBBcHBsaWNhdGlvbiBtZXRhZGF0YSBhbmQgcmVsYXRlZCBBUElzLlxuICpcbiAqIEBtb2R1bGVcbiAqL1xuLyoqXG4gKiBHZXRzIHRoZSBhcHBsaWNhdGlvbiB2ZXJzaW9uLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGdldFZlcnNpb24gfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvYXBwJztcbiAqIGNvbnN0IGFwcFZlcnNpb24gPSBhd2FpdCBnZXRWZXJzaW9uKCk7XG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcbiAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46YXBwfHZlcnNpb24nKTtcbn1cbi8qKlxuICogR2V0cyB0aGUgYXBwbGljYXRpb24gbmFtZS5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBnZXROYW1lIH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL2FwcCc7XG4gKiBjb25zdCBhcHBOYW1lID0gYXdhaXQgZ2V0TmFtZSgpO1xuICogYGBgXG4gKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIGludm9rZSgncGx1Z2luOmFwcHxuYW1lJyk7XG59XG4vKipcbiAqIEdldHMgdGhlIFRhdXJpIHZlcnNpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGdldFRhdXJpVmVyc2lvbiB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS9hcHAnO1xuICogY29uc3QgdGF1cmlWZXJzaW9uID0gYXdhaXQgZ2V0VGF1cmlWZXJzaW9uKCk7XG4gKiBgYGBcbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VGF1cmlWZXJzaW9uKCkge1xuICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjphcHB8dGF1cmlfdmVyc2lvbicpO1xufVxuLyoqXG4gKiBTaG93cyB0aGUgYXBwbGljYXRpb24gb24gbWFjT1MuIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgYXV0b21hdGljYWxseSBmb2N1cyBhbnkgc3BlY2lmaWMgYXBwIHdpbmRvdy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgc2hvdyB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS9hcHAnO1xuICogYXdhaXQgc2hvdygpO1xuICogYGBgXG4gKlxuICogQHNpbmNlIDEuMi4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNob3coKSB7XG4gICAgcmV0dXJuIGludm9rZSgncGx1Z2luOmFwcHxhcHBfc2hvdycpO1xufVxuLyoqXG4gKiBIaWRlcyB0aGUgYXBwbGljYXRpb24gb24gbWFjT1MuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGhpZGUgfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvYXBwJztcbiAqIGF3YWl0IGhpZGUoKTtcbiAqIGBgYFxuICpcbiAqIEBzaW5jZSAxLjIuMFxuICovXG5hc3luYyBmdW5jdGlvbiBoaWRlKCkge1xuICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjphcHB8YXBwX2hpZGUnKTtcbn1cblxuZXhwb3J0IHsgZ2V0TmFtZSwgZ2V0VGF1cmlWZXJzaW9uLCBnZXRWZXJzaW9uLCBoaWRlLCBzaG93IH07XG4iXSwibmFtZXMiOlsiaW52b2tlIiwiZ2V0VmVyc2lvbiIsImdldE5hbWUiLCJnZXRUYXVyaVZlcnNpb24iLCJzaG93IiwiaGlkZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/app.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Channel: () => (/* binding */ Channel),\n/* harmony export */   PluginListener: () => (/* binding */ PluginListener),\n/* harmony export */   Resource: () => (/* binding */ Resource),\n/* harmony export */   addPluginListener: () => (/* binding */ addPluginListener),\n/* harmony export */   convertFileSrc: () => (/* binding */ convertFileSrc),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   isTauri: () => (/* binding */ isTauri),\n/* harmony export */   transformCallback: () => (/* binding */ transformCallback)\n/* harmony export */ });\n/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./external/tslib/tslib.es6.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/external/tslib/tslib.es6.js\");\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nvar _Channel_onmessage, _Channel_nextMessageId, _Channel_pendingMessages, _Resource_rid;\n/**\n * Invoke your custom commands.\n *\n * This package is also accessible with `window.__TAURI__.tauri` when [`app.withGlobalTauri`](https://tauri.app/v1/api/config/#appconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */ /**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */ function transformCallback(callback, once = false) {\n    return window.__TAURI_INTERNALS__.transformCallback(callback, once);\n}\nclass Channel {\n    constructor(){\n        // @ts-expect-error field used by the IPC serializer\n        this.__TAURI_CHANNEL_MARKER__ = true;\n        _Channel_onmessage.set(this, ()=>{\n        // no-op\n        });\n        _Channel_nextMessageId.set(this, 0);\n        _Channel_pendingMessages.set(this, {});\n        this.id = transformCallback(({ message, id })=>{\n            // the id is used as a mechanism to preserve message order\n            if (id === (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_nextMessageId, \"f\")) {\n                (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_nextMessageId, id + 1, \"f\");\n                (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_onmessage, \"f\").call(this, message);\n                // process pending messages\n                const pendingMessageIds = Object.keys((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\"));\n                if (pendingMessageIds.length > 0) {\n                    let nextId = id + 1;\n                    for (const pendingId of pendingMessageIds.sort()){\n                        // if we have the next message, process it\n                        if (parseInt(pendingId) === nextId) {\n                            // eslint-disable-next-line security/detect-object-injection\n                            const message = (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\")[pendingId];\n                            // eslint-disable-next-line security/detect-object-injection\n                            delete (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\")[pendingId];\n                            (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_onmessage, \"f\").call(this, message);\n                            // move the id counter to the next message to check\n                            nextId += 1;\n                        } else {\n                            break;\n                        }\n                    }\n                    (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_nextMessageId, nextId, \"f\");\n                }\n            } else {\n                (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_pendingMessages, \"f\")[id.toString()] = message;\n            }\n        });\n    }\n    set onmessage(handler) {\n        (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Channel_onmessage, handler, \"f\");\n    }\n    get onmessage() {\n        return (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Channel_onmessage, \"f\");\n    }\n    toJSON() {\n        return `__CHANNEL__:${this.id}`;\n    }\n}\n_Channel_onmessage = new WeakMap(), _Channel_nextMessageId = new WeakMap(), _Channel_pendingMessages = new WeakMap();\nclass PluginListener {\n    constructor(plugin, event, channelId){\n        this.plugin = plugin;\n        this.event = event;\n        this.channelId = channelId;\n    }\n    async unregister() {\n        return invoke(`plugin:${this.plugin}|remove_listener`, {\n            event: this.event,\n            channelId: this.channelId\n        });\n    }\n}\n/**\n * Adds a listener to a plugin event.\n *\n * @returns The listener object to stop listening to the events.\n *\n * @since 2.0.0\n */ async function addPluginListener(plugin, event, cb) {\n    const handler = new Channel();\n    handler.onmessage = cb;\n    return invoke(`plugin:${plugin}|register_listener`, {\n        event,\n        handler\n    }).then(()=>new PluginListener(plugin, event, handler.id));\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @param options The request options.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */ async function invoke(cmd, args = {}, options) {\n    return window.__TAURI_INTERNALS__.invoke(cmd, args, options);\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `http://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self' ipc: http://ipc.localhost; img-src 'self' asset: http://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/core';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */ function convertFileSrc(filePath, protocol = \"asset\") {\n    return window.__TAURI_INTERNALS__.convertFileSrc(filePath, protocol);\n}\n/**\n * A rust-backed resource stored through `tauri::Manager::resources_table` API.\n *\n * The resource lives in the main process and does not exist\n * in the Javascript world, and thus will not be cleaned up automatiacally\n * except on application exit. If you want to clean it up early, call {@linkcode Resource.close}\n *\n * @example\n * ```typescript\n * import { Resource, invoke } from '@tauri-apps/api/core';\n * export class DatabaseHandle extends Resource {\n *   static async open(path: string): Promise<DatabaseHandle> {\n *     const rid: number = await invoke('open_db', { path });\n *     return new DatabaseHandle(rid);\n *   }\n *\n *   async execute(sql: string): Promise<void> {\n *     await invoke('execute_sql', { rid: this.rid, sql });\n *   }\n * }\n * ```\n */ class Resource {\n    get rid() {\n        return (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Resource_rid, \"f\");\n    }\n    constructor(rid){\n        _Resource_rid.set(this, void 0);\n        (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Resource_rid, rid, \"f\");\n    }\n    /**\n     * Destroys and cleans up this resource from memory.\n     * **You should not call any method on this object anymore and should drop any reference to it.**\n     */ async close() {\n        return invoke(\"plugin:resources|close\", {\n            rid: this.rid\n        });\n    }\n}\n_Resource_rid = new WeakMap();\nfunction isTauri() {\n    return \"isTauri\" in window && !!window.isTauri;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogicalPosition: () => (/* binding */ LogicalPosition),\n/* harmony export */   LogicalSize: () => (/* binding */ LogicalSize),\n/* harmony export */   PhysicalPosition: () => (/* binding */ PhysicalPosition),\n/* harmony export */   PhysicalSize: () => (/* binding */ PhysicalSize)\n/* harmony export */ });\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n *\n * @since 2.0.0\n */ class LogicalSize {\n    constructor(width, height){\n        this.type = \"Logical\";\n        this.width = width;\n        this.height = height;\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 2.0.0\n */ class PhysicalSize {\n    constructor(width, height){\n        this.type = \"Physical\";\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const appWindow = getCurrent();\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize();\n     * const logical = size.toLogical(factor);\n     * ```\n     *  */ toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 2.0.0\n */ class LogicalPosition {\n    constructor(x, y){\n        this.type = \"Logical\";\n        this.x = x;\n        this.y = y;\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 2.0.0\n */ class PhysicalPosition {\n    constructor(x, y){\n        this.type = \"Physical\";\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const appWindow = getCurrent();\n     * const factor = await appWindow.scaleFactor();\n     * const position = await appWindow.innerPosition();\n     * const logical = position.toLogical(factor);\n     * ```\n     * */ toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9kcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHFFQUFxRTtBQUNyRSxzQ0FBc0M7QUFDdEMsK0JBQStCO0FBQy9COzs7O0NBSUMsR0FDRCxNQUFNQTtJQUNGQyxZQUFZQyxLQUFLLEVBQUVDLE1BQU0sQ0FBRTtRQUN2QixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0YsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNsQjtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNELE1BQU1FO0lBQ0ZKLFlBQVlDLEtBQUssRUFBRUMsTUFBTSxDQUFFO1FBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRixLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO0lBQ2xCO0lBQ0E7Ozs7Ozs7Ozs7UUFVSSxHQUNKRyxVQUFVQyxXQUFXLEVBQUU7UUFDbkIsT0FBTyxJQUFJUCxZQUFZLElBQUksQ0FBQ0UsS0FBSyxHQUFHSyxhQUFhLElBQUksQ0FBQ0osTUFBTSxHQUFHSTtJQUNuRTtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNELE1BQU1DO0lBQ0ZQLFlBQVlRLENBQUMsRUFBRUMsQ0FBQyxDQUFFO1FBQ2QsSUFBSSxDQUFDTixJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNLLENBQUMsR0FBR0E7UUFDVCxJQUFJLENBQUNDLENBQUMsR0FBR0E7SUFDYjtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNELE1BQU1DO0lBQ0ZWLFlBQVlRLENBQUMsRUFBRUMsQ0FBQyxDQUFFO1FBQ2QsSUFBSSxDQUFDTixJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNLLENBQUMsR0FBR0E7UUFDVCxJQUFJLENBQUNDLENBQUMsR0FBR0E7SUFDYjtJQUNBOzs7Ozs7Ozs7O09BVUcsR0FDSEosVUFBVUMsV0FBVyxFQUFFO1FBQ25CLE9BQU8sSUFBSUMsZ0JBQWdCLElBQUksQ0FBQ0MsQ0FBQyxHQUFHRixhQUFhLElBQUksQ0FBQ0csQ0FBQyxHQUFHSDtJQUM5RDtBQUNKO0FBRXdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbG9jYWwtZmlyc3QtdGF1cmkvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9kcGkuanM/NDIwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0IFRhdXJpIFByb2dyYW1tZSB3aXRoaW4gVGhlIENvbW1vbnMgQ29uc2VydmFuY3lcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vKipcbiAqIEEgc2l6ZSByZXByZXNlbnRlZCBpbiBsb2dpY2FsIHBpeGVscy5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuY2xhc3MgTG9naWNhbFNpemUge1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ0xvZ2ljYWwnO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cbn1cbi8qKlxuICogQSBzaXplIHJlcHJlc2VudGVkIGluIHBoeXNpY2FsIHBpeGVscy5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuY2xhc3MgUGh5c2ljYWxTaXplIHtcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdQaHlzaWNhbCc7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBwaHlzaWNhbCBzaXplIHRvIGEgbG9naWNhbCBvbmUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogaW1wb3J0IHsgZ2V0Q3VycmVudCB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS93aW5kb3cnO1xuICAgICAqIGNvbnN0IGFwcFdpbmRvdyA9IGdldEN1cnJlbnQoKTtcbiAgICAgKiBjb25zdCBmYWN0b3IgPSBhd2FpdCBhcHBXaW5kb3cuc2NhbGVGYWN0b3IoKTtcbiAgICAgKiBjb25zdCBzaXplID0gYXdhaXQgYXBwV2luZG93LmlubmVyU2l6ZSgpO1xuICAgICAqIGNvbnN0IGxvZ2ljYWwgPSBzaXplLnRvTG9naWNhbChmYWN0b3IpO1xuICAgICAqIGBgYFxuICAgICAqICAqL1xuICAgIHRvTG9naWNhbChzY2FsZUZhY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IExvZ2ljYWxTaXplKHRoaXMud2lkdGggLyBzY2FsZUZhY3RvciwgdGhpcy5oZWlnaHQgLyBzY2FsZUZhY3Rvcik7XG4gICAgfVxufVxuLyoqXG4gKiAgQSBwb3NpdGlvbiByZXByZXNlbnRlZCBpbiBsb2dpY2FsIHBpeGVscy5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuY2xhc3MgTG9naWNhbFBvc2l0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdMb2dpY2FsJztcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG59XG4vKipcbiAqICBBIHBvc2l0aW9uIHJlcHJlc2VudGVkIGluIHBoeXNpY2FsIHBpeGVscy5cbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuY2xhc3MgUGh5c2ljYWxQb3NpdGlvbiB7XG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgICB0aGlzLnR5cGUgPSAnUGh5c2ljYWwnO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgcGh5c2ljYWwgcG9zaXRpb24gdG8gYSBsb2dpY2FsIG9uZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBpbXBvcnQgeyBnZXRDdXJyZW50IH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL3dpbmRvdyc7XG4gICAgICogY29uc3QgYXBwV2luZG93ID0gZ2V0Q3VycmVudCgpO1xuICAgICAqIGNvbnN0IGZhY3RvciA9IGF3YWl0IGFwcFdpbmRvdy5zY2FsZUZhY3RvcigpO1xuICAgICAqIGNvbnN0IHBvc2l0aW9uID0gYXdhaXQgYXBwV2luZG93LmlubmVyUG9zaXRpb24oKTtcbiAgICAgKiBjb25zdCBsb2dpY2FsID0gcG9zaXRpb24udG9Mb2dpY2FsKGZhY3Rvcik7XG4gICAgICogYGBgXG4gICAgICogKi9cbiAgICB0b0xvZ2ljYWwoc2NhbGVGYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2dpY2FsUG9zaXRpb24odGhpcy54IC8gc2NhbGVGYWN0b3IsIHRoaXMueSAvIHNjYWxlRmFjdG9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IExvZ2ljYWxQb3NpdGlvbiwgTG9naWNhbFNpemUsIFBoeXNpY2FsUG9zaXRpb24sIFBoeXNpY2FsU2l6ZSB9O1xuIl0sIm5hbWVzIjpbIkxvZ2ljYWxTaXplIiwiY29uc3RydWN0b3IiLCJ3aWR0aCIsImhlaWdodCIsInR5cGUiLCJQaHlzaWNhbFNpemUiLCJ0b0xvZ2ljYWwiLCJzY2FsZUZhY3RvciIsIkxvZ2ljYWxQb3NpdGlvbiIsIngiLCJ5IiwiUGh5c2ljYWxQb3NpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/event.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/event.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TauriEvent: () => (/* binding */ TauriEvent),\n/* harmony export */   emit: () => (/* binding */ emit),\n/* harmony export */   emitTo: () => (/* binding */ emitTo),\n/* harmony export */   listen: () => (/* binding */ listen),\n/* harmony export */   once: () => (/* binding */ once)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://tauri.app/v1/api/config/#appconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */ /**\n * @since 1.1.0\n */ var TauriEvent;\n(function(TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n    TauriEvent[\"DRAG\"] = \"tauri://drag\";\n    TauriEvent[\"DROP\"] = \"tauri://drop\";\n    TauriEvent[\"DROP_OVER\"] = \"tauri://drop-over\";\n    TauriEvent[\"DROP_CANCELLED\"] = \"tauri://drag-cancelled\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */ async function _unlisten(event, eventId) {\n    await (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:event|unlisten\", {\n        event,\n        eventId\n    });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */ async function listen(event, handler, options) {\n    var _a;\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === \"string\" ? {\n        kind: \"AnyLabel\",\n        label: options.target\n    } : (_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : {\n        kind: \"Any\"\n    };\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:event|listen\", {\n        event,\n        target,\n        handler: (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.transformCallback)(handler)\n    }).then((eventId)=>{\n        return async ()=>_unlisten(event, eventId);\n    });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */ async function once(event, handler, options) {\n    return listen(event, (eventData)=>{\n        handler(eventData);\n        _unlisten(event, eventData.id).catch(()=>{});\n    }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */ async function emit(event, payload) {\n    await (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:event|emit\", {\n        event,\n        payload\n    });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */ async function emitTo(target, event, payload) {\n    const eventTarget = typeof target === \"string\" ? {\n        kind: \"AnyLabel\",\n        label: target\n    } : target;\n    await (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:event|emit_to\", {\n        target: eventTarget,\n        event,\n        payload\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9ldmVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0Q7QUFFdEQscUVBQXFFO0FBQ3JFLHNDQUFzQztBQUN0QywrQkFBK0I7QUFDL0I7Ozs7O0NBS0MsR0FDRDs7Q0FFQyxHQUNELElBQUlFO0FBQ0gsVUFBVUEsVUFBVTtJQUNqQkEsVUFBVSxDQUFDLGlCQUFpQixHQUFHO0lBQy9CQSxVQUFVLENBQUMsZUFBZSxHQUFHO0lBQzdCQSxVQUFVLENBQUMseUJBQXlCLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQyxtQkFBbUIsR0FBRztJQUNqQ0EsVUFBVSxDQUFDLGVBQWUsR0FBRztJQUM3QkEsVUFBVSxDQUFDLGNBQWMsR0FBRztJQUM1QkEsVUFBVSxDQUFDLDhCQUE4QixHQUFHO0lBQzVDQSxVQUFVLENBQUMsdUJBQXVCLEdBQUc7SUFDckNBLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRztJQUMvQkEsVUFBVSxDQUFDLGtCQUFrQixHQUFHO0lBQ2hDQSxVQUFVLENBQUMsT0FBTyxHQUFHO0lBQ3JCQSxVQUFVLENBQUMsT0FBTyxHQUFHO0lBQ3JCQSxVQUFVLENBQUMsWUFBWSxHQUFHO0lBQzFCQSxVQUFVLENBQUMsaUJBQWlCLEdBQUc7QUFDbkMsR0FBR0EsY0FBZUEsQ0FBQUEsYUFBYSxDQUFDO0FBQ2hDOzs7Ozs7O0NBT0MsR0FDRCxlQUFlQyxVQUFVQyxLQUFLLEVBQUVDLE9BQU87SUFDbkMsTUFBTUwsZ0RBQU1BLENBQUMseUJBQXlCO1FBQ2xDSTtRQUNBQztJQUNKO0FBQ0o7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJDLEdBQ0QsZUFBZUMsT0FBT0YsS0FBSyxFQUFFRyxPQUFPLEVBQUVDLE9BQU87SUFDekMsSUFBSUM7SUFDSixNQUFNQyxTQUFTLE9BQVFGLENBQUFBLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRRSxNQUFNLE1BQU0sV0FDdkY7UUFBRUMsTUFBTTtRQUFZQyxPQUFPSixRQUFRRSxNQUFNO0lBQUMsSUFDMUMsQ0FBQ0QsS0FBS0QsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFFLE1BQU0sTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSUEsS0FBSztRQUFFRSxNQUFNO0lBQU07SUFDN0gsT0FBT1gsZ0RBQU1BLENBQUMsdUJBQXVCO1FBQ2pDSTtRQUNBTTtRQUNBSCxTQUFTTiwyREFBaUJBLENBQUNNO0lBQy9CLEdBQUdNLElBQUksQ0FBQyxDQUFDUjtRQUNMLE9BQU8sVUFBWUYsVUFBVUMsT0FBT0M7SUFDeEM7QUFDSjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBeUJDLEdBQ0QsZUFBZVMsS0FBS1YsS0FBSyxFQUFFRyxPQUFPLEVBQUVDLE9BQU87SUFDdkMsT0FBT0YsT0FBT0YsT0FBTyxDQUFDVztRQUNsQlIsUUFBUVE7UUFDUlosVUFBVUMsT0FBT1csVUFBVUMsRUFBRSxFQUFFQyxLQUFLLENBQUMsS0FBUTtJQUNqRCxHQUFHVDtBQUNQO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNELGVBQWVVLEtBQUtkLEtBQUssRUFBRWUsT0FBTztJQUM5QixNQUFNbkIsZ0RBQU1BLENBQUMscUJBQXFCO1FBQzlCSTtRQUNBZTtJQUNKO0FBQ0o7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNELGVBQWVDLE9BQU9WLE1BQU0sRUFBRU4sS0FBSyxFQUFFZSxPQUFPO0lBQ3hDLE1BQU1FLGNBQWMsT0FBT1gsV0FBVyxXQUFXO1FBQUVDLE1BQU07UUFBWUMsT0FBT0Y7SUFBTyxJQUFJQTtJQUN2RixNQUFNVixnREFBTUEsQ0FBQyx3QkFBd0I7UUFDakNVLFFBQVFXO1FBQ1JqQjtRQUNBZTtJQUNKO0FBQ0o7QUFFa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sb2NhbC1maXJzdC10YXVyaS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdGF1cmktYXBwcythcGlAMi4wLjAtYmV0YS4xMS9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2V2ZW50LmpzP2ZkYWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52b2tlLCB0cmFuc2Zvcm1DYWxsYmFjayB9IGZyb20gJy4vY29yZS5qcyc7XG5cbi8vIENvcHlyaWdodCAyMDE5LTIwMjQgVGF1cmkgUHJvZ3JhbW1lIHdpdGhpbiBUaGUgQ29tbW9ucyBDb25zZXJ2YW5jeVxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8qKlxuICogVGhlIGV2ZW50IHN5c3RlbSBhbGxvd3MgeW91IHRvIGVtaXQgZXZlbnRzIHRvIHRoZSBiYWNrZW5kIGFuZCBsaXN0ZW4gdG8gZXZlbnRzIGZyb20gaXQuXG4gKlxuICogVGhpcyBwYWNrYWdlIGlzIGFsc28gYWNjZXNzaWJsZSB3aXRoIGB3aW5kb3cuX19UQVVSSV9fLmV2ZW50YCB3aGVuIFtgYXBwLndpdGhHbG9iYWxUYXVyaWBdKGh0dHBzOi8vdGF1cmkuYXBwL3YxL2FwaS9jb25maWcvI2FwcGNvbmZpZy53aXRoZ2xvYmFsdGF1cmkpIGluIGB0YXVyaS5jb25mLmpzb25gIGlzIHNldCB0byBgdHJ1ZWAuXG4gKiBAbW9kdWxlXG4gKi9cbi8qKlxuICogQHNpbmNlIDEuMS4wXG4gKi9cbnZhciBUYXVyaUV2ZW50O1xuKGZ1bmN0aW9uIChUYXVyaUV2ZW50KSB7XG4gICAgVGF1cmlFdmVudFtcIldJTkRPV19SRVNJWkVEXCJdID0gXCJ0YXVyaTovL3Jlc2l6ZVwiO1xuICAgIFRhdXJpRXZlbnRbXCJXSU5ET1dfTU9WRURcIl0gPSBcInRhdXJpOi8vbW92ZVwiO1xuICAgIFRhdXJpRXZlbnRbXCJXSU5ET1dfQ0xPU0VfUkVRVUVTVEVEXCJdID0gXCJ0YXVyaTovL2Nsb3NlLXJlcXVlc3RlZFwiO1xuICAgIFRhdXJpRXZlbnRbXCJXSU5ET1dfREVTVFJPWUVEXCJdID0gXCJ0YXVyaTovL2Rlc3Ryb3llZFwiO1xuICAgIFRhdXJpRXZlbnRbXCJXSU5ET1dfRk9DVVNcIl0gPSBcInRhdXJpOi8vZm9jdXNcIjtcbiAgICBUYXVyaUV2ZW50W1wiV0lORE9XX0JMVVJcIl0gPSBcInRhdXJpOi8vYmx1clwiO1xuICAgIFRhdXJpRXZlbnRbXCJXSU5ET1dfU0NBTEVfRkFDVE9SX0NIQU5HRURcIl0gPSBcInRhdXJpOi8vc2NhbGUtY2hhbmdlXCI7XG4gICAgVGF1cmlFdmVudFtcIldJTkRPV19USEVNRV9DSEFOR0VEXCJdID0gXCJ0YXVyaTovL3RoZW1lLWNoYW5nZWRcIjtcbiAgICBUYXVyaUV2ZW50W1wiV0lORE9XX0NSRUFURURcIl0gPSBcInRhdXJpOi8vd2luZG93LWNyZWF0ZWRcIjtcbiAgICBUYXVyaUV2ZW50W1wiV0VCVklFV19DUkVBVEVEXCJdID0gXCJ0YXVyaTovL3dlYnZpZXctY3JlYXRlZFwiO1xuICAgIFRhdXJpRXZlbnRbXCJEUkFHXCJdID0gXCJ0YXVyaTovL2RyYWdcIjtcbiAgICBUYXVyaUV2ZW50W1wiRFJPUFwiXSA9IFwidGF1cmk6Ly9kcm9wXCI7XG4gICAgVGF1cmlFdmVudFtcIkRST1BfT1ZFUlwiXSA9IFwidGF1cmk6Ly9kcm9wLW92ZXJcIjtcbiAgICBUYXVyaUV2ZW50W1wiRFJPUF9DQU5DRUxMRURcIl0gPSBcInRhdXJpOi8vZHJhZy1jYW5jZWxsZWRcIjtcbn0pKFRhdXJpRXZlbnQgfHwgKFRhdXJpRXZlbnQgPSB7fSkpO1xuLyoqXG4gKiBVbnJlZ2lzdGVyIHRoZSBldmVudCBsaXN0ZW5lciBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIG5hbWUgYW5kIGlkLlxuICpcbiAqIEBpZ25vcmVcbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgbmFtZVxuICogQHBhcmFtIGV2ZW50SWQgRXZlbnQgaWRlbnRpZmllclxuICogQHJldHVybnNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gX3VubGlzdGVuKGV2ZW50LCBldmVudElkKSB7XG4gICAgYXdhaXQgaW52b2tlKCdwbHVnaW46ZXZlbnR8dW5saXN0ZW4nLCB7XG4gICAgICAgIGV2ZW50LFxuICAgICAgICBldmVudElkXG4gICAgfSk7XG59XG4vKipcbiAqIExpc3RlbiB0byBhbiBlbWl0dGVkIGV2ZW50IHRvIGFueSB7QGxpbmsgRXZlbnRUYXJnZXR8dGFyZ2V0fS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgbGlzdGVuIH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL2V2ZW50JztcbiAqIGNvbnN0IHVubGlzdGVuID0gYXdhaXQgbGlzdGVuPHN0cmluZz4oJ2Vycm9yJywgKGV2ZW50KSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKGBHb3QgZXJyb3IsIHBheWxvYWQ6ICR7ZXZlbnQucGF5bG9hZH1gKTtcbiAqIH0pO1xuICpcbiAqIC8vIHlvdSBuZWVkIHRvIGNhbGwgdW5saXN0ZW4gaWYgeW91ciBoYW5kbGVyIGdvZXMgb3V0IG9mIHNjb3BlIGUuZy4gdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWRcbiAqIHVubGlzdGVuKCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZXZlbnQgRXZlbnQgbmFtZS4gTXVzdCBpbmNsdWRlIG9ubHkgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMsIGAtYCwgYC9gLCBgOmAgYW5kIGBfYC5cbiAqIEBwYXJhbSBoYW5kbGVyIEV2ZW50IGhhbmRsZXIgY2FsbGJhY2suXG4gKiBAcGFyYW0gb3B0aW9ucyBFdmVudCBsaXN0ZW5pbmcgb3B0aW9ucy5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gYSBmdW5jdGlvbiB0byB1bmxpc3RlbiB0byB0aGUgZXZlbnQuXG4gKiBOb3RlIHRoYXQgcmVtb3ZpbmcgdGhlIGxpc3RlbmVyIGlzIHJlcXVpcmVkIGlmIHlvdXIgbGlzdGVuZXIgZ29lcyBvdXQgb2Ygc2NvcGUgZS5nLiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbGlzdGVuKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHRhcmdldCA9IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRhcmdldCkgPT09ICdzdHJpbmcnXG4gICAgICAgID8geyBraW5kOiAnQW55TGFiZWwnLCBsYWJlbDogb3B0aW9ucy50YXJnZXQgfVxuICAgICAgICA6IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50YXJnZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHsga2luZDogJ0FueScgfTtcbiAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46ZXZlbnR8bGlzdGVuJywge1xuICAgICAgICBldmVudCxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBoYW5kbGVyOiB0cmFuc2Zvcm1DYWxsYmFjayhoYW5kbGVyKVxuICAgIH0pLnRoZW4oKGV2ZW50SWQpID0+IHtcbiAgICAgICAgcmV0dXJuIGFzeW5jICgpID0+IF91bmxpc3RlbihldmVudCwgZXZlbnRJZCk7XG4gICAgfSk7XG59XG4vKipcbiAqIExpc3RlbnMgb25jZSB0byBhbiBlbWl0dGVkIGV2ZW50IHRvIGFueSB7QGxpbmsgRXZlbnRUYXJnZXR8dGFyZ2V0fS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgb25jZSB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS9ldmVudCc7XG4gKiBpbnRlcmZhY2UgTG9hZGVkUGF5bG9hZCB7XG4gKiAgIGxvZ2dlZEluOiBib29sZWFuLFxuICogICB0b2tlbjogc3RyaW5nXG4gKiB9XG4gKiBjb25zdCB1bmxpc3RlbiA9IGF3YWl0IG9uY2U8TG9hZGVkUGF5bG9hZD4oJ2xvYWRlZCcsIChldmVudCkgPT4ge1xuICogICBjb25zb2xlLmxvZyhgQXBwIGlzIGxvYWRlZCwgbG9nZ2VkSW46ICR7ZXZlbnQucGF5bG9hZC5sb2dnZWRJbn0sIHRva2VuOiAke2V2ZW50LnBheWxvYWQudG9rZW59YCk7XG4gKiB9KTtcbiAqXG4gKiAvLyB5b3UgbmVlZCB0byBjYWxsIHVubGlzdGVuIGlmIHlvdXIgaGFuZGxlciBnb2VzIG91dCBvZiBzY29wZSBlLmcuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkXG4gKiB1bmxpc3RlbigpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGV2ZW50IEV2ZW50IG5hbWUuIE11c3QgaW5jbHVkZSBvbmx5IGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBgLWAsIGAvYCwgYDpgIGFuZCBgX2AuXG4gKiBAcGFyYW0gaGFuZGxlciBFdmVudCBoYW5kbGVyIGNhbGxiYWNrLlxuICogQHBhcmFtIG9wdGlvbnMgRXZlbnQgbGlzdGVuaW5nIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgcmVzb2x2aW5nIHRvIGEgZnVuY3Rpb24gdG8gdW5saXN0ZW4gdG8gdGhlIGV2ZW50LlxuICogTm90ZSB0aGF0IHJlbW92aW5nIHRoZSBsaXN0ZW5lciBpcyByZXF1aXJlZCBpZiB5b3VyIGxpc3RlbmVyIGdvZXMgb3V0IG9mIHNjb3BlIGUuZy4gdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGlzdGVuKGV2ZW50LCAoZXZlbnREYXRhKSA9PiB7XG4gICAgICAgIGhhbmRsZXIoZXZlbnREYXRhKTtcbiAgICAgICAgX3VubGlzdGVuKGV2ZW50LCBldmVudERhdGEuaWQpLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgfSwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEVtaXRzIGFuIGV2ZW50IHRvIGFsbCB7QGxpbmsgRXZlbnRUYXJnZXR8dGFyZ2V0c30uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGVtaXQgfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvZXZlbnQnO1xuICogYXdhaXQgZW1pdCgnZnJvbnRlbmQtbG9hZGVkJywgeyBsb2dnZWRJbjogdHJ1ZSwgdG9rZW46ICdhdXRoVG9rZW4nIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGV2ZW50IEV2ZW50IG5hbWUuIE11c3QgaW5jbHVkZSBvbmx5IGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBgLWAsIGAvYCwgYDpgIGFuZCBgX2AuXG4gKiBAcGFyYW0gcGF5bG9hZCBFdmVudCBwYXlsb2FkLlxuICpcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5hc3luYyBmdW5jdGlvbiBlbWl0KGV2ZW50LCBwYXlsb2FkKSB7XG4gICAgYXdhaXQgaW52b2tlKCdwbHVnaW46ZXZlbnR8ZW1pdCcsIHtcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIHBheWxvYWRcbiAgICB9KTtcbn1cbi8qKlxuICogRW1pdHMgYW4gZXZlbnQgdG8gYWxsIHtAbGluayBFdmVudFRhcmdldHx0YXJnZXRzfSBtYXRjaGluZyB0aGUgZ2l2ZW4gdGFyZ2V0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBlbWl0VG8gfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvZXZlbnQnO1xuICogYXdhaXQgZW1pdFRvKCdtYWluJywgJ2Zyb250ZW5kLWxvYWRlZCcsIHsgbG9nZ2VkSW46IHRydWUsIHRva2VuOiAnYXV0aFRva2VuJyB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB0YXJnZXQgTGFiZWwgb2YgdGhlIHRhcmdldCBXaW5kb3cvV2Vidmlldy9XZWJ2aWV3V2luZG93IG9yIHJhdyB7QGxpbmsgRXZlbnRUYXJnZXR9IG9iamVjdC5cbiAqIEBwYXJhbSBldmVudCBFdmVudCBuYW1lLiBNdXN0IGluY2x1ZGUgb25seSBhbHBoYW51bWVyaWMgY2hhcmFjdGVycywgYC1gLCBgL2AsIGA6YCBhbmQgYF9gLlxuICogQHBhcmFtIHBheWxvYWQgRXZlbnQgcGF5bG9hZC5cbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZW1pdFRvKHRhcmdldCwgZXZlbnQsIHBheWxvYWQpIHtcbiAgICBjb25zdCBldmVudFRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8geyBraW5kOiAnQW55TGFiZWwnLCBsYWJlbDogdGFyZ2V0IH0gOiB0YXJnZXQ7XG4gICAgYXdhaXQgaW52b2tlKCdwbHVnaW46ZXZlbnR8ZW1pdF90bycsIHtcbiAgICAgICAgdGFyZ2V0OiBldmVudFRhcmdldCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIHBheWxvYWRcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgVGF1cmlFdmVudCwgZW1pdCwgZW1pdFRvLCBsaXN0ZW4sIG9uY2UgfTtcbiJdLCJuYW1lcyI6WyJpbnZva2UiLCJ0cmFuc2Zvcm1DYWxsYmFjayIsIlRhdXJpRXZlbnQiLCJfdW5saXN0ZW4iLCJldmVudCIsImV2ZW50SWQiLCJsaXN0ZW4iLCJoYW5kbGVyIiwib3B0aW9ucyIsIl9hIiwidGFyZ2V0Iiwia2luZCIsImxhYmVsIiwidGhlbiIsIm9uY2UiLCJldmVudERhdGEiLCJpZCIsImNhdGNoIiwiZW1pdCIsInBheWxvYWQiLCJlbWl0VG8iLCJldmVudFRhcmdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/external/tslib/tslib.es6.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/external/tslib/tslib.es6.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ function __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9leHRlcm5hbC90c2xpYi90c2xpYi5lczYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs4RUFhOEUsR0FDOUUsb0RBQW9ELEdBR3BELFNBQVNBLHVCQUF1QkMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsQ0FBQztJQUNwRCxJQUFJRCxTQUFTLE9BQU8sQ0FBQ0MsR0FBRyxNQUFNLElBQUlDLFVBQVU7SUFDNUMsSUFBSSxPQUFPSCxVQUFVLGFBQWFELGFBQWFDLFNBQVMsQ0FBQ0UsSUFBSSxDQUFDRixNQUFNSSxHQUFHLENBQUNMLFdBQVcsTUFBTSxJQUFJSSxVQUFVO0lBQ3ZHLE9BQU9GLFNBQVMsTUFBTUMsSUFBSUQsU0FBUyxNQUFNQyxFQUFFRyxJQUFJLENBQUNOLFlBQVlHLElBQUlBLEVBQUVJLEtBQUssR0FBR04sTUFBTU8sR0FBRyxDQUFDUjtBQUN4RjtBQUVBLFNBQVNTLHVCQUF1QlQsUUFBUSxFQUFFQyxLQUFLLEVBQUVNLEtBQUssRUFBRUwsSUFBSSxFQUFFQyxDQUFDO0lBQzNELElBQUlELFNBQVMsS0FBSyxNQUFNLElBQUlFLFVBQVU7SUFDdEMsSUFBSUYsU0FBUyxPQUFPLENBQUNDLEdBQUcsTUFBTSxJQUFJQyxVQUFVO0lBQzVDLElBQUksT0FBT0gsVUFBVSxhQUFhRCxhQUFhQyxTQUFTLENBQUNFLElBQUksQ0FBQ0YsTUFBTUksR0FBRyxDQUFDTCxXQUFXLE1BQU0sSUFBSUksVUFBVTtJQUN2RyxPQUFPLFNBQVUsTUFBTUQsRUFBRUcsSUFBSSxDQUFDTixVQUFVTyxTQUFTSixJQUFJQSxFQUFFSSxLQUFLLEdBQUdBLFFBQVFOLE1BQU1TLEdBQUcsQ0FBQ1YsVUFBVU8sUUFBU0E7QUFDeEc7QUFFQSxPQUFPSSxvQkFBb0IsYUFBYUEsa0JBQWtCLFNBQVVDLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxPQUFPO0lBQzFGLElBQUlDLElBQUksSUFBSUMsTUFBTUY7SUFDbEIsT0FBT0MsRUFBRUUsSUFBSSxHQUFHLG1CQUFtQkYsRUFBRUgsS0FBSyxHQUFHQSxPQUFPRyxFQUFFRixVQUFVLEdBQUdBLFlBQVlFO0FBQ25GO0FBRTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbG9jYWwtZmlyc3QtdGF1cmkvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9leHRlcm5hbC90c2xpYi90c2xpYi5lczYuanM/NzU4YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sICovXHJcblxyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbnR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xyXG4gICAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xyXG59O1xuXG5leHBvcnQgeyBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LCBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IH07XG4iXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJ2YWx1ZSIsImdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiLCJTdXBwcmVzc2VkRXJyb3IiLCJlcnJvciIsInN1cHByZXNzZWQiLCJtZXNzYWdlIiwiZSIsIkVycm9yIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/external/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   transformImage: () => (/* binding */ transformImage)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */ class Image extends _core_js__WEBPACK_IMPORTED_MODULE_0__.Resource {\n    /**\n     * Creates an Image from a resource ID. For internal use only.\n     *\n     * @ignore\n     */ constructor(rid){\n        super(rid);\n    }\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */ static async new(rgba, width, height) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:image|new\", {\n            rgba: transformImage(rgba),\n            width,\n            height\n        }).then((rid)=>new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided bytes by inferring the file format.\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */ static async fromBytes(bytes) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:image|from_bytes\", {\n            bytes: transformImage(bytes)\n        }).then((rid)=>new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided path.\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */ static async fromPath(path) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:image|from_path\", {\n            path\n        }).then((rid)=>new Image(rid));\n    }\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */ async rgba() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:image|rgba\", {\n            rid: this.rid\n        }).then((buffer)=>new Uint8Array(buffer));\n    }\n    /** Returns the size of this image.  */ async size() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:image|size\", {\n            rid: this.rid\n        });\n    }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */ function transformImage(image) {\n    const ret = image == null ? null : typeof image === \"string\" ? image : image instanceof Uint8Array ? Array.from(image) : image instanceof ArrayBuffer ? Array.from(new Uint8Array(image)) : image instanceof Image ? image.rid : image;\n    return ret;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9pbWFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFFN0MscUVBQXFFO0FBQ3JFLHNDQUFzQztBQUN0QywrQkFBK0I7QUFDL0IseURBQXlELEdBQ3pELE1BQU1FLGNBQWNGLDhDQUFRQTtJQUN4Qjs7OztLQUlDLEdBQ0RHLFlBQVlDLEdBQUcsQ0FBRTtRQUNiLEtBQUssQ0FBQ0E7SUFDVjtJQUNBLHFIQUFxSCxHQUNySCxhQUFhQyxJQUFJQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFO1FBQ2xDLE9BQU9QLGdEQUFNQSxDQUFDLG9CQUFvQjtZQUM5QkssTUFBTUcsZUFBZUg7WUFDckJDO1lBQ0FDO1FBQ0osR0FBR0UsSUFBSSxDQUFDLENBQUNOLE1BQVEsSUFBSUYsTUFBTUU7SUFDL0I7SUFDQTs7Ozs7Ozs7Ozs7O0tBWUMsR0FDRCxhQUFhTyxVQUFVQyxLQUFLLEVBQUU7UUFDMUIsT0FBT1gsZ0RBQU1BLENBQUMsMkJBQTJCO1lBQ3JDVyxPQUFPSCxlQUFlRztRQUMxQixHQUFHRixJQUFJLENBQUMsQ0FBQ04sTUFBUSxJQUFJRixNQUFNRTtJQUMvQjtJQUNBOzs7Ozs7Ozs7OztLQVdDLEdBQ0QsYUFBYVMsU0FBU0MsSUFBSSxFQUFFO1FBQ3hCLE9BQU9iLGdEQUFNQSxDQUFDLDBCQUEwQjtZQUFFYTtRQUFLLEdBQUdKLElBQUksQ0FBQyxDQUFDTixNQUFRLElBQUlGLE1BQU1FO0lBQzlFO0lBQ0Esa0ZBQWtGLEdBQ2xGLE1BQU1FLE9BQU87UUFDVCxPQUFPTCxnREFBTUEsQ0FBQyxxQkFBcUI7WUFDL0JHLEtBQUssSUFBSSxDQUFDQSxHQUFHO1FBQ2pCLEdBQUdNLElBQUksQ0FBQyxDQUFDSyxTQUFXLElBQUlDLFdBQVdEO0lBQ3ZDO0lBQ0EscUNBQXFDLEdBQ3JDLE1BQU1FLE9BQU87UUFDVCxPQUFPaEIsZ0RBQU1BLENBQUMscUJBQXFCO1lBQUVHLEtBQUssSUFBSSxDQUFDQSxHQUFHO1FBQUM7SUFDdkQ7QUFDSjtBQUNBOzs7OztDQUtDLEdBQ0QsU0FBU0ssZUFBZVMsS0FBSztJQUN6QixNQUFNQyxNQUFNRCxTQUFTLE9BQ2YsT0FDQSxPQUFPQSxVQUFVLFdBQ2JBLFFBQ0FBLGlCQUFpQkYsYUFDYkksTUFBTUMsSUFBSSxDQUFDSCxTQUNYQSxpQkFBaUJJLGNBQ2JGLE1BQU1DLElBQUksQ0FBQyxJQUFJTCxXQUFXRSxVQUMxQkEsaUJBQWlCaEIsUUFDYmdCLE1BQU1kLEdBQUcsR0FDVGM7SUFDdEIsT0FBT0M7QUFDWDtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvaW1hZ2UuanM/NjYxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXNvdXJjZSwgaW52b2tlIH0gZnJvbSAnLi9jb3JlLmpzJztcblxuLy8gQ29weXJpZ2h0IDIwMTktMjAyNCBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLyoqIEFuIFJHQkEgSW1hZ2UgaW4gcm93LW1ham9yIG9yZGVyIGZyb20gdG9wIHRvIGJvdHRvbS4gKi9cbmNsYXNzIEltYWdlIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gSW1hZ2UgZnJvbSBhIHJlc291cmNlIElELiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmlkKSB7XG4gICAgICAgIHN1cGVyKHJpZCk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGVzIGEgbmV3IEltYWdlIHVzaW5nIFJHQkEgZGF0YSwgaW4gcm93LW1ham9yIG9yZGVyIGZyb20gdG9wIHRvIGJvdHRvbSwgYW5kIHdpdGggc3BlY2lmaWVkIHdpZHRoIGFuZCBoZWlnaHQuICovXG4gICAgc3RhdGljIGFzeW5jIG5ldyhyZ2JhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjppbWFnZXxuZXcnLCB7XG4gICAgICAgICAgICByZ2JhOiB0cmFuc2Zvcm1JbWFnZShyZ2JhKSxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0pLnRoZW4oKHJpZCkgPT4gbmV3IEltYWdlKHJpZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGltYWdlIHVzaW5nIHRoZSBwcm92aWRlZCBieXRlcyBieSBpbmZlcnJpbmcgdGhlIGZpbGUgZm9ybWF0LlxuICAgICAqIElmIHRoZSBmb3JtYXQgaXMga25vd24sIHByZWZlciBbQGxpbmsgSW1hZ2UuZnJvbVBuZ0J5dGVzXSBvciBbQGxpbmsgSW1hZ2UuZnJvbUljb0J5dGVzXS5cbiAgICAgKlxuICAgICAqIE9ubHkgYGljb2AgYW5kIGBwbmdgIGFyZSBzdXBwb3J0ZWQgKGJhc2VkIG9uIGFjdGl2YXRlZCBmZWF0dXJlIGZsYWcpLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHlvdSBuZWVkIHRoZSBgaW1hZ2UtaWNvYCBvciBgaW1hZ2UtcG5nYCBDYXJnbyBmZWF0dXJlcyB0byB1c2UgdGhpcyBBUEkuXG4gICAgICogVG8gZW5hYmxlIGl0LCBjaGFuZ2UgeW91ciBDYXJnby50b21sIGZpbGU6XG4gICAgICogYGBgdG9tbFxuICAgICAqIFtkZXBlbmRlbmNpZXNdXG4gICAgICogdGF1cmkgPSB7IHZlcnNpb24gPSBcIi4uLlwiLCBmZWF0dXJlcyA9IFtcIi4uLlwiLCBcImltYWdlLXBuZ1wiXSB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZyb21CeXRlcyhieXRlcykge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46aW1hZ2V8ZnJvbV9ieXRlcycsIHtcbiAgICAgICAgICAgIGJ5dGVzOiB0cmFuc2Zvcm1JbWFnZShieXRlcylcbiAgICAgICAgfSkudGhlbigocmlkKSA9PiBuZXcgSW1hZ2UocmlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW1hZ2UgdXNpbmcgdGhlIHByb3ZpZGVkIHBhdGguXG4gICAgICpcbiAgICAgKiBPbmx5IGBpY29gIGFuZCBgcG5nYCBhcmUgc3VwcG9ydGVkIChiYXNlZCBvbiBhY3RpdmF0ZWQgZmVhdHVyZSBmbGFnKS5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB5b3UgbmVlZCB0aGUgYGltYWdlLWljb2Agb3IgYGltYWdlLXBuZ2AgQ2FyZ28gZmVhdHVyZXMgdG8gdXNlIHRoaXMgQVBJLlxuICAgICAqIFRvIGVuYWJsZSBpdCwgY2hhbmdlIHlvdXIgQ2FyZ28udG9tbCBmaWxlOlxuICAgICAqIGBgYHRvbWxcbiAgICAgKiBbZGVwZW5kZW5jaWVzXVxuICAgICAqIHRhdXJpID0geyB2ZXJzaW9uID0gXCIuLi5cIiwgZmVhdHVyZXMgPSBbXCIuLi5cIiwgXCJpbWFnZS1wbmdcIl0gfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tUGF0aChwYXRoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjppbWFnZXxmcm9tX3BhdGgnLCB7IHBhdGggfSkudGhlbigocmlkKSA9PiBuZXcgSW1hZ2UocmlkKSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRoZSBSR0JBIGRhdGEgZm9yIHRoaXMgaW1hZ2UsIGluIHJvdy1tYWpvciBvcmRlciBmcm9tIHRvcCB0byBib3R0b20uICAqL1xuICAgIGFzeW5jIHJnYmEoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjppbWFnZXxyZ2JhJywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZFxuICAgICAgICB9KS50aGVuKChidWZmZXIpID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGlzIGltYWdlLiAgKi9cbiAgICBhc3luYyBzaXplKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46aW1hZ2V8c2l6ZScsIHsgcmlkOiB0aGlzLnJpZCB9KTtcbiAgICB9XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgaW1hZ2UgZnJvbSB2YXJpb3VzIHR5cGVzIGludG8gYSB0eXBlIGFjY2VwdGFibGUgYnkgUnVzdC5cbiAqXG4gKiBTZWUgW3RhdXJpOjppbWFnZTo6SnNJbWFnZV0oaHR0cHM6Ly9kb2NzLnJzL3RhdXJpLzIvdGF1cmkvaW1hZ2UvZW51bS5Kc0ltYWdlLmh0bWwpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogTm90ZSB0aGUgQVBJIHNpZ25hdHVyZSBpcyBub3Qgc3RhYmxlIGFuZCBtaWdodCBjaGFuZ2UuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUltYWdlKGltYWdlKSB7XG4gICAgY29uc3QgcmV0ID0gaW1hZ2UgPT0gbnVsbFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGltYWdlXG4gICAgICAgICAgICA6IGltYWdlIGluc3RhbmNlb2YgVWludDhBcnJheVxuICAgICAgICAgICAgICAgID8gQXJyYXkuZnJvbShpbWFnZSlcbiAgICAgICAgICAgICAgICA6IGltYWdlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJcbiAgICAgICAgICAgICAgICAgICAgPyBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGltYWdlKSlcbiAgICAgICAgICAgICAgICAgICAgOiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGltYWdlLnJpZFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpbWFnZTtcbiAgICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgeyBJbWFnZSwgdHJhbnNmb3JtSW1hZ2UgfTtcbiJdLCJuYW1lcyI6WyJSZXNvdXJjZSIsImludm9rZSIsIkltYWdlIiwiY29uc3RydWN0b3IiLCJyaWQiLCJuZXciLCJyZ2JhIiwid2lkdGgiLCJoZWlnaHQiLCJ0cmFuc2Zvcm1JbWFnZSIsInRoZW4iLCJmcm9tQnl0ZXMiLCJieXRlcyIsImZyb21QYXRoIiwicGF0aCIsImJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJzaXplIiwiaW1hZ2UiLCJyZXQiLCJBcnJheSIsImZyb20iLCJBcnJheUJ1ZmZlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: () => (/* reexport module object */ _app_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   core: () => (/* reexport module object */ _core_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   dpi: () => (/* reexport module object */ _dpi_js__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   event: () => (/* reexport module object */ _event_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   image: () => (/* reexport module object */ _image_js__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   menu: () => (/* reexport module object */ _menu_js__WEBPACK_IMPORTED_MODULE_9__),\n/* harmony export */   path: () => (/* reexport module object */ _path_js__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   tray: () => (/* reexport module object */ _tray_js__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   webview: () => (/* reexport module object */ _webview_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   webviewWindow: () => (/* reexport module object */ _webviewWindow_js__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   window: () => (/* reexport module object */ _window_js__WEBPACK_IMPORTED_MODULE_3__)\n/* harmony export */ });\n/* harmony import */ var _app_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/app.js\");\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/event.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./window.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/window.js\");\n/* harmony import */ var _webview_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webview.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webview.js\");\n/* harmony import */ var _webviewWindow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webviewWindow.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webviewWindow.js\");\n/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./path.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/path.js\");\n/* harmony import */ var _dpi_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dpi.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js\");\n/* harmony import */ var _tray_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tray.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/tray.js\");\n/* harmony import */ var _menu_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./menu.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdDO0FBQ2pCO0FBQ3FCO0FBQ25CO0FBQ2lCO0FBQ2xCO0FBQ3NCO0FBQ3BCO0FBQ3NCO0FBQ3JCO0FBQ2lDO0FBQzNCO0FBQ1M7QUFDbEI7QUFDZ0I7QUFDakI7QUFDbUI7QUFDbEI7QUFDa0I7QUFDbEI7QUFDb0I7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sb2NhbC1maXJzdC10YXVyaS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdGF1cmktYXBwcythcGlAMi4wLjAtYmV0YS4xMS9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2luZGV4LmpzP2UyY2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJy4vYXBwLmpzJztcbmV4cG9ydCB7IGFwcCB9O1xuaW1wb3J0ICogYXMgZXZlbnQgZnJvbSAnLi9ldmVudC5qcyc7XG5leHBvcnQgeyBldmVudCB9O1xuaW1wb3J0ICogYXMgY29yZSBmcm9tICcuL2NvcmUuanMnO1xuZXhwb3J0IHsgY29yZSB9O1xuaW1wb3J0ICogYXMgd2luZG93IGZyb20gJy4vd2luZG93LmpzJztcbmV4cG9ydCB7IHdpbmRvdyB9O1xuaW1wb3J0ICogYXMgd2VidmlldyBmcm9tICcuL3dlYnZpZXcuanMnO1xuZXhwb3J0IHsgd2VidmlldyB9O1xuaW1wb3J0ICogYXMgd2Vidmlld1dpbmRvdyBmcm9tICcuL3dlYnZpZXdXaW5kb3cuanMnO1xuZXhwb3J0IHsgd2Vidmlld1dpbmRvdyB9O1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICcuL3BhdGguanMnO1xuZXhwb3J0IHsgcGF0aCB9O1xuaW1wb3J0ICogYXMgZHBpIGZyb20gJy4vZHBpLmpzJztcbmV4cG9ydCB7IGRwaSB9O1xuaW1wb3J0ICogYXMgdHJheSBmcm9tICcuL3RyYXkuanMnO1xuZXhwb3J0IHsgdHJheSB9O1xuaW1wb3J0ICogYXMgbWVudSBmcm9tICcuL21lbnUuanMnO1xuZXhwb3J0IHsgbWVudSB9O1xuaW1wb3J0ICogYXMgaW1hZ2UgZnJvbSAnLi9pbWFnZS5qcyc7XG5leHBvcnQgeyBpbWFnZSB9O1xuIl0sIm5hbWVzIjpbImFwcCIsImV2ZW50IiwiY29yZSIsIndpbmRvdyIsIndlYnZpZXciLCJ3ZWJ2aWV3V2luZG93IiwicGF0aCIsImRwaSIsInRyYXkiLCJtZW51IiwiaW1hZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckMenuItem: () => (/* reexport safe */ _menu_checkMenuItem_js__WEBPACK_IMPORTED_MODULE_3__.CheckMenuItem),\n/* harmony export */   IconMenuItem: () => (/* reexport safe */ _menu_iconMenuItem_js__WEBPACK_IMPORTED_MODULE_4__.IconMenuItem),\n/* harmony export */   Menu: () => (/* reexport safe */ _menu_menu_js__WEBPACK_IMPORTED_MODULE_2__.Menu),\n/* harmony export */   MenuItem: () => (/* reexport safe */ _menu_menuItem_js__WEBPACK_IMPORTED_MODULE_1__.MenuItem),\n/* harmony export */   NativeIcon: () => (/* reexport safe */ _menu_iconMenuItem_js__WEBPACK_IMPORTED_MODULE_4__.NativeIcon),\n/* harmony export */   PredefinedMenuItem: () => (/* reexport safe */ _menu_predefinedMenuItem_js__WEBPACK_IMPORTED_MODULE_5__.PredefinedMenuItem),\n/* harmony export */   Submenu: () => (/* reexport safe */ _menu_submenu_js__WEBPACK_IMPORTED_MODULE_0__.Submenu)\n/* harmony export */ });\n/* harmony import */ var _menu_submenu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu/submenu.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/submenu.js\");\n/* harmony import */ var _menu_menuItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menu/menuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menuItem.js\");\n/* harmony import */ var _menu_menu_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu/menu.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menu.js\");\n/* harmony import */ var _menu_checkMenuItem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./menu/checkMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/checkMenuItem.js\");\n/* harmony import */ var _menu_iconMenuItem_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu/iconMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/iconMenuItem.js\");\n/* harmony import */ var _menu_predefinedMenuItem_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./menu/predefinedMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/predefinedMenuItem.js\");\n\n\n\n\n\n // Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n // SPDX-License-Identifier: Apache-2.0\n // SPDX-License-Identifier: MIT\n /**\n * Menu types and utilities.\n *\n * This package is also accessible with `window.__TAURI__.menu` when [`app.withGlobalTauri`](https://tauri.app/v1/api/config/#appconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9tZW51LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEM7QUFDRTtBQUNSO0FBQ2tCO0FBQ1U7QUFDQSxDQUVsRSxxRUFBcUU7Q0FDckUsc0NBQXNDO0NBQ3RDLCtCQUErQjtDQUMvQjs7Ozs7Q0FLQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvbWVudS5qcz9jOGE0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFN1Ym1lbnUgfSBmcm9tICcuL21lbnUvc3VibWVudS5qcyc7XG5leHBvcnQgeyBNZW51SXRlbSB9IGZyb20gJy4vbWVudS9tZW51SXRlbS5qcyc7XG5leHBvcnQgeyBNZW51IH0gZnJvbSAnLi9tZW51L21lbnUuanMnO1xuZXhwb3J0IHsgQ2hlY2tNZW51SXRlbSB9IGZyb20gJy4vbWVudS9jaGVja01lbnVJdGVtLmpzJztcbmV4cG9ydCB7IEljb25NZW51SXRlbSwgTmF0aXZlSWNvbiB9IGZyb20gJy4vbWVudS9pY29uTWVudUl0ZW0uanMnO1xuZXhwb3J0IHsgUHJlZGVmaW5lZE1lbnVJdGVtIH0gZnJvbSAnLi9tZW51L3ByZWRlZmluZWRNZW51SXRlbS5qcyc7XG5cbi8vIENvcHlyaWdodCAyMDE5LTIwMjQgVGF1cmkgUHJvZ3JhbW1lIHdpdGhpbiBUaGUgQ29tbW9ucyBDb25zZXJ2YW5jeVxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8qKlxuICogTWVudSB0eXBlcyBhbmQgdXRpbGl0aWVzLlxuICpcbiAqIFRoaXMgcGFja2FnZSBpcyBhbHNvIGFjY2Vzc2libGUgd2l0aCBgd2luZG93Ll9fVEFVUklfXy5tZW51YCB3aGVuIFtgYXBwLndpdGhHbG9iYWxUYXVyaWBdKGh0dHBzOi8vdGF1cmkuYXBwL3YxL2FwaS9jb25maWcvI2FwcGNvbmZpZy53aXRoZ2xvYmFsdGF1cmkpIGluIGB0YXVyaS5jb25mLmpzb25gIGlzIHNldCB0byBgdHJ1ZWAuXG4gKiBAbW9kdWxlXG4gKi9cbiJdLCJuYW1lcyI6WyJTdWJtZW51IiwiTWVudUl0ZW0iLCJNZW51IiwiQ2hlY2tNZW51SXRlbSIsIkljb25NZW51SXRlbSIsIk5hdGl2ZUljb24iLCJQcmVkZWZpbmVkTWVudUl0ZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MenuItemBase: () => (/* binding */ MenuItemBase),\n/* harmony export */   newMenu: () => (/* binding */ newMenu)\n/* harmony export */ });\n/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../external/tslib/tslib.es6.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/external/tslib/tslib.es6.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../image.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js\");\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nvar _MenuItemBase_id, _MenuItemBase_kind;\nfunction injectChannel(i) {\n    var _a;\n    if (\"items\" in i) {\n        i.items = (_a = i.items) === null || _a === void 0 ? void 0 : _a.map((item)=>\"rid\" in item ? item : injectChannel(item));\n    } else if (\"action\" in i && i.action) {\n        const handler = new _core_js__WEBPACK_IMPORTED_MODULE_1__.Channel();\n        handler.onmessage = i.action;\n        delete i.action;\n        return {\n            ...i,\n            handler\n        };\n    }\n    return i;\n}\nasync function newMenu(kind, opts) {\n    const handler = new _core_js__WEBPACK_IMPORTED_MODULE_1__.Channel();\n    let items = null;\n    if (opts && typeof opts === \"object\") {\n        if (\"action\" in opts && opts.action) {\n            handler.onmessage = opts.action;\n            delete opts.action;\n        }\n        if (\"items\" in opts && opts.items) {\n            items = opts.items.map((i)=>{\n                var _a;\n                if (\"rid\" in i) {\n                    return [\n                        i.rid,\n                        i.kind\n                    ];\n                }\n                if (\"item\" in i && typeof i.item === \"object\" && ((_a = i.item.About) === null || _a === void 0 ? void 0 : _a.icon)) {\n                    i.item.About.icon = (0,_image_js__WEBPACK_IMPORTED_MODULE_2__.transformImage)(i.item.About.icon);\n                }\n                if (\"icon\" in i && i.icon) {\n                    i.icon = (0,_image_js__WEBPACK_IMPORTED_MODULE_2__.transformImage)(i.icon);\n                }\n                return injectChannel(i);\n            });\n        }\n    }\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|new\", {\n        kind,\n        options: opts ? {\n            ...opts,\n            items\n        } : undefined,\n        handler\n    });\n}\nclass MenuItemBase extends _core_js__WEBPACK_IMPORTED_MODULE_1__.Resource {\n    /** The id of this item. */ get id() {\n        return (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MenuItemBase_id, \"f\");\n    }\n    /** @ignore */ get kind() {\n        return (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MenuItemBase_kind, \"f\");\n    }\n    /** @ignore */ constructor(rid, id, kind){\n        super(rid);\n        /** @ignore */ _MenuItemBase_id.set(this, void 0);\n        /** @ignore */ _MenuItemBase_kind.set(this, void 0);\n        (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MenuItemBase_id, id, \"f\");\n        (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MenuItemBase_kind, kind, \"f\");\n    }\n}\n_MenuItemBase_id = new WeakMap(), _MenuItemBase_kind = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9tZW51L2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0c7QUFDekM7QUFDVjtBQUU3QyxxRUFBcUU7QUFDckUsc0NBQXNDO0FBQ3RDLCtCQUErQjtBQUMvQixJQUFJTSxrQkFBa0JDO0FBQ3RCLFNBQVNDLGNBQWNDLENBQUM7SUFDcEIsSUFBSUM7SUFDSixJQUFJLFdBQVdELEdBQUc7UUFDZEEsRUFBRUUsS0FBSyxHQUFHLENBQUNELEtBQUtELEVBQUVFLEtBQUssTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdFLEdBQUcsQ0FBQyxDQUFDQyxPQUFTLFNBQVNBLE9BQU9BLE9BQU9MLGNBQWNLO0lBQ3hILE9BQ0ssSUFBSSxZQUFZSixLQUFLQSxFQUFFSyxNQUFNLEVBQUU7UUFDaEMsTUFBTUMsVUFBVSxJQUFJYiw2Q0FBT0E7UUFDM0JhLFFBQVFDLFNBQVMsR0FBR1AsRUFBRUssTUFBTTtRQUM1QixPQUFPTCxFQUFFSyxNQUFNO1FBQ2YsT0FBTztZQUFFLEdBQUdMLENBQUM7WUFBRU07UUFBUTtJQUMzQjtJQUNBLE9BQU9OO0FBQ1g7QUFDQSxlQUFlUSxRQUFRQyxJQUFJLEVBQUVDLElBQUk7SUFDN0IsTUFBTUosVUFBVSxJQUFJYiw2Q0FBT0E7SUFDM0IsSUFBSVMsUUFBUTtJQUNaLElBQUlRLFFBQVEsT0FBT0EsU0FBUyxVQUFVO1FBQ2xDLElBQUksWUFBWUEsUUFBUUEsS0FBS0wsTUFBTSxFQUFFO1lBQ2pDQyxRQUFRQyxTQUFTLEdBQUdHLEtBQUtMLE1BQU07WUFDL0IsT0FBT0ssS0FBS0wsTUFBTTtRQUN0QjtRQUNBLElBQUksV0FBV0ssUUFBUUEsS0FBS1IsS0FBSyxFQUFFO1lBQy9CQSxRQUFRUSxLQUFLUixLQUFLLENBQUNDLEdBQUcsQ0FBQyxDQUFDSDtnQkFDcEIsSUFBSUM7Z0JBQ0osSUFBSSxTQUFTRCxHQUFHO29CQUNaLE9BQU87d0JBQUNBLEVBQUVXLEdBQUc7d0JBQUVYLEVBQUVTLElBQUk7cUJBQUM7Z0JBQzFCO2dCQUNBLElBQUksVUFBVVQsS0FBSyxPQUFPQSxFQUFFSSxJQUFJLEtBQUssWUFBYSxFQUFDSCxLQUFLRCxFQUFFSSxJQUFJLENBQUNRLEtBQUssTUFBTSxRQUFRWCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdZLElBQUksR0FBRztvQkFDakhiLEVBQUVJLElBQUksQ0FBQ1EsS0FBSyxDQUFDQyxJQUFJLEdBQUdqQix5REFBY0EsQ0FBQ0ksRUFBRUksSUFBSSxDQUFDUSxLQUFLLENBQUNDLElBQUk7Z0JBQ3hEO2dCQUNBLElBQUksVUFBVWIsS0FBS0EsRUFBRWEsSUFBSSxFQUFFO29CQUN2QmIsRUFBRWEsSUFBSSxHQUFHakIseURBQWNBLENBQUNJLEVBQUVhLElBQUk7Z0JBQ2xDO2dCQUNBLE9BQU9kLGNBQWNDO1lBQ3pCO1FBQ0o7SUFDSjtJQUNBLE9BQU9OLGdEQUFNQSxDQUFDLG1CQUFtQjtRQUM3QmU7UUFDQUssU0FBU0osT0FBTztZQUFFLEdBQUdBLElBQUk7WUFBRVI7UUFBTSxJQUFJYTtRQUNyQ1Q7SUFDSjtBQUNKO0FBQ0EsTUFBTVUscUJBQXFCckIsOENBQVFBO0lBQy9CLHlCQUF5QixHQUN6QixJQUFJc0IsS0FBSztRQUNMLE9BQU8xQixvRkFBc0JBLENBQUMsSUFBSSxFQUFFTSxrQkFBa0I7SUFDMUQ7SUFDQSxZQUFZLEdBQ1osSUFBSVksT0FBTztRQUNQLE9BQU9sQixvRkFBc0JBLENBQUMsSUFBSSxFQUFFTyxvQkFBb0I7SUFDNUQ7SUFDQSxZQUFZLEdBQ1pvQixZQUFZUCxHQUFHLEVBQUVNLEVBQUUsRUFBRVIsSUFBSSxDQUFFO1FBQ3ZCLEtBQUssQ0FBQ0U7UUFDTixZQUFZLEdBQ1pkLGlCQUFpQnNCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNoQyxZQUFZLEdBQ1pyQixtQkFBbUJxQixHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUs7UUFDbEMzQixvRkFBc0JBLENBQUMsSUFBSSxFQUFFSyxrQkFBa0JvQixJQUFJO1FBQ25EekIsb0ZBQXNCQSxDQUFDLElBQUksRUFBRU0sb0JBQW9CVyxNQUFNO0lBQzNEO0FBQ0o7QUFDQVosbUJBQW1CLElBQUl1QixXQUFXdEIscUJBQXFCLElBQUlzQjtBQUUxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvbWVudS9iYXNlLmpzPzQwZTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19jbGFzc1ByaXZhdGVGaWVsZEdldCwgX19jbGFzc1ByaXZhdGVGaWVsZFNldCB9IGZyb20gJy4uL2V4dGVybmFsL3RzbGliL3RzbGliLmVzNi5qcyc7XG5pbXBvcnQgeyBDaGFubmVsLCBpbnZva2UsIFJlc291cmNlIH0gZnJvbSAnLi4vY29yZS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1JbWFnZSB9IGZyb20gJy4uL2ltYWdlLmpzJztcblxuLy8gQ29weXJpZ2h0IDIwMTktMjAyNCBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxudmFyIF9NZW51SXRlbUJhc2VfaWQsIF9NZW51SXRlbUJhc2Vfa2luZDtcbmZ1bmN0aW9uIGluamVjdENoYW5uZWwoaSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoJ2l0ZW1zJyBpbiBpKSB7XG4gICAgICAgIGkuaXRlbXMgPSAoX2EgPSBpLml0ZW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKChpdGVtKSA9PiAncmlkJyBpbiBpdGVtID8gaXRlbSA6IGluamVjdENoYW5uZWwoaXRlbSkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgnYWN0aW9uJyBpbiBpICYmIGkuYWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ2hhbm5lbCgpO1xuICAgICAgICBoYW5kbGVyLm9ubWVzc2FnZSA9IGkuYWN0aW9uO1xuICAgICAgICBkZWxldGUgaS5hY3Rpb247XG4gICAgICAgIHJldHVybiB7IC4uLmksIGhhbmRsZXIgfTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG59XG5hc3luYyBmdW5jdGlvbiBuZXdNZW51KGtpbmQsIG9wdHMpIHtcbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IENoYW5uZWwoKTtcbiAgICBsZXQgaXRlbXMgPSBudWxsO1xuICAgIGlmIChvcHRzICYmIHR5cGVvZiBvcHRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoJ2FjdGlvbicgaW4gb3B0cyAmJiBvcHRzLmFjdGlvbikge1xuICAgICAgICAgICAgaGFuZGxlci5vbm1lc3NhZ2UgPSBvcHRzLmFjdGlvbjtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRzLmFjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2l0ZW1zJyBpbiBvcHRzICYmIG9wdHMuaXRlbXMpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gb3B0cy5pdGVtcy5tYXAoKGkpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaWYgKCdyaWQnIGluIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtpLnJpZCwgaS5raW5kXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCdpdGVtJyBpbiBpICYmIHR5cGVvZiBpLml0ZW0gPT09ICdvYmplY3QnICYmICgoX2EgPSBpLml0ZW0uQWJvdXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pY29uKSkge1xuICAgICAgICAgICAgICAgICAgICBpLml0ZW0uQWJvdXQuaWNvbiA9IHRyYW5zZm9ybUltYWdlKGkuaXRlbS5BYm91dC5pY29uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCdpY29uJyBpbiBpICYmIGkuaWNvbikge1xuICAgICAgICAgICAgICAgICAgICBpLmljb24gPSB0cmFuc2Zvcm1JbWFnZShpLmljb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5qZWN0Q2hhbm5lbChpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fG5ldycsIHtcbiAgICAgICAga2luZCxcbiAgICAgICAgb3B0aW9uczogb3B0cyA/IHsgLi4ub3B0cywgaXRlbXMgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgaGFuZGxlclxuICAgIH0pO1xufVxuY2xhc3MgTWVudUl0ZW1CYXNlIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAgIC8qKiBUaGUgaWQgb2YgdGhpcyBpdGVtLiAqL1xuICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01lbnVJdGVtQmFzZV9pZCwgXCJmXCIpO1xuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIGdldCBraW5kKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWVudUl0ZW1CYXNlX2tpbmQsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBjb25zdHJ1Y3RvcihyaWQsIGlkLCBraW5kKSB7XG4gICAgICAgIHN1cGVyKHJpZCk7XG4gICAgICAgIC8qKiBAaWdub3JlICovXG4gICAgICAgIF9NZW51SXRlbUJhc2VfaWQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIC8qKiBAaWdub3JlICovXG4gICAgICAgIF9NZW51SXRlbUJhc2Vfa2luZC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTWVudUl0ZW1CYXNlX2lkLCBpZCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9NZW51SXRlbUJhc2Vfa2luZCwga2luZCwgXCJmXCIpO1xuICAgIH1cbn1cbl9NZW51SXRlbUJhc2VfaWQgPSBuZXcgV2Vha01hcCgpLCBfTWVudUl0ZW1CYXNlX2tpbmQgPSBuZXcgV2Vha01hcCgpO1xuXG5leHBvcnQgeyBNZW51SXRlbUJhc2UsIG5ld01lbnUgfTtcbiJdLCJuYW1lcyI6WyJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsIkNoYW5uZWwiLCJpbnZva2UiLCJSZXNvdXJjZSIsInRyYW5zZm9ybUltYWdlIiwiX01lbnVJdGVtQmFzZV9pZCIsIl9NZW51SXRlbUJhc2Vfa2luZCIsImluamVjdENoYW5uZWwiLCJpIiwiX2EiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJhY3Rpb24iLCJoYW5kbGVyIiwib25tZXNzYWdlIiwibmV3TWVudSIsImtpbmQiLCJvcHRzIiwicmlkIiwiQWJvdXQiLCJpY29uIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsIk1lbnVJdGVtQmFzZSIsImlkIiwiY29uc3RydWN0b3IiLCJzZXQiLCJXZWFrTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/checkMenuItem.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/checkMenuItem.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckMenuItem: () => (/* binding */ CheckMenuItem)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A check menu item inside a {@linkcode Menu} or {@linkcode Submenu}\n * and usually contains a text and a check mark or a similar toggle\n * that corresponds to a checked and unchecked states.\n */ class CheckMenuItem extends _base_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemBase {\n    /** @ignore */ constructor(rid, id){\n        super(rid, id, \"Check\");\n    }\n    /** Create a new check menu item. */ static async new(opts) {\n        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.newMenu)(\"Check\", opts).then(([rid, id])=>new CheckMenuItem(rid, id));\n    }\n    /** Returns the text of this check menu item. */ async text() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|text\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets the text for this check menu item. */ async setText(text) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_text\", {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this check menu item is enabled or not. */ async isEnabled() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|is_enabled\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets whether this check menu item is enabled or not. */ async setEnabled(enabled) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_enabled\", {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /** Sets the accelerator for this check menu item. */ async setAccelerator(accelerator) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_accelerator\", {\n            rid: this.rid,\n            kind: this.kind,\n            accelerator\n        });\n    }\n    /** Returns whether this check menu item is checked or not. */ async isChecked() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|is_checked\", {\n            rid: this.rid\n        });\n    }\n    /** Sets whether this check menu item is checked or not. */ async setChecked(checked) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_checked\", {\n            rid: this.rid,\n            checked\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9tZW51L2NoZWNrTWVudUl0ZW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtEO0FBQ2Q7QUFFcEMscUVBQXFFO0FBQ3JFLHNDQUFzQztBQUN0QywrQkFBK0I7QUFDL0I7Ozs7Q0FJQyxHQUNELE1BQU1HLHNCQUFzQkgsa0RBQVlBO0lBQ3BDLFlBQVksR0FDWkksWUFBWUMsR0FBRyxFQUFFQyxFQUFFLENBQUU7UUFDakIsS0FBSyxDQUFDRCxLQUFLQyxJQUFJO0lBQ25CO0lBQ0Esa0NBQWtDLEdBQ2xDLGFBQWFDLElBQUlDLElBQUksRUFBRTtRQUNuQixPQUFPUCxpREFBT0EsQ0FBQyxTQUFTTyxNQUFNQyxJQUFJLENBQUMsQ0FBQyxDQUFDSixLQUFLQyxHQUFHLEdBQUssSUFBSUgsY0FBY0UsS0FBS0M7SUFDN0U7SUFDQSw4Q0FBOEMsR0FDOUMsTUFBTUksT0FBTztRQUNULE9BQU9SLGdEQUFNQSxDQUFDLG9CQUFvQjtZQUFFRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUFFTSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUFDO0lBQ3ZFO0lBQ0EsNENBQTRDLEdBQzVDLE1BQU1DLFFBQVFGLElBQUksRUFBRTtRQUNoQixPQUFPUixnREFBTUEsQ0FBQyx3QkFBd0I7WUFDbENHLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQ2JNLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZEO1FBQ0o7SUFDSjtJQUNBLDREQUE0RCxHQUM1RCxNQUFNRyxZQUFZO1FBQ2QsT0FBT1gsZ0RBQU1BLENBQUMsMEJBQTBCO1lBQUVHLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQUVNLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQUM7SUFDN0U7SUFDQSx5REFBeUQsR0FDekQsTUFBTUcsV0FBV0MsT0FBTyxFQUFFO1FBQ3RCLE9BQU9iLGdEQUFNQSxDQUFDLDJCQUEyQjtZQUNyQ0csS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFDYk0sTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZkk7UUFDSjtJQUNKO0lBQ0EsbURBQW1ELEdBQ25ELE1BQU1DLGVBQWVDLFdBQVcsRUFBRTtRQUM5QixPQUFPZixnREFBTUEsQ0FBQywrQkFBK0I7WUFDekNHLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQ2JNLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZNO1FBQ0o7SUFDSjtJQUNBLDREQUE0RCxHQUM1RCxNQUFNQyxZQUFZO1FBQ2QsT0FBT2hCLGdEQUFNQSxDQUFDLDBCQUEwQjtZQUFFRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztRQUFDO0lBQzVEO0lBQ0EseURBQXlELEdBQ3pELE1BQU1jLFdBQVdDLE9BQU8sRUFBRTtRQUN0QixPQUFPbEIsZ0RBQU1BLENBQUMsMkJBQTJCO1lBQ3JDRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiZTtRQUNKO0lBQ0o7QUFDSjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvbWVudS9jaGVja01lbnVJdGVtLmpzPzM5N2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVudUl0ZW1CYXNlLCBuZXdNZW51IH0gZnJvbSAnLi9iYXNlLmpzJztcbmltcG9ydCB7IGludm9rZSB9IGZyb20gJy4uL2NvcmUuanMnO1xuXG4vLyBDb3B5cmlnaHQgMjAxOS0yMDI0IFRhdXJpIFByb2dyYW1tZSB3aXRoaW4gVGhlIENvbW1vbnMgQ29uc2VydmFuY3lcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vKipcbiAqIEEgY2hlY2sgbWVudSBpdGVtIGluc2lkZSBhIHtAbGlua2NvZGUgTWVudX0gb3Ige0BsaW5rY29kZSBTdWJtZW51fVxuICogYW5kIHVzdWFsbHkgY29udGFpbnMgYSB0ZXh0IGFuZCBhIGNoZWNrIG1hcmsgb3IgYSBzaW1pbGFyIHRvZ2dsZVxuICogdGhhdCBjb3JyZXNwb25kcyB0byBhIGNoZWNrZWQgYW5kIHVuY2hlY2tlZCBzdGF0ZXMuXG4gKi9cbmNsYXNzIENoZWNrTWVudUl0ZW0gZXh0ZW5kcyBNZW51SXRlbUJhc2Uge1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgY29uc3RydWN0b3IocmlkLCBpZCkge1xuICAgICAgICBzdXBlcihyaWQsIGlkLCAnQ2hlY2snKTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZSBhIG5ldyBjaGVjayBtZW51IGl0ZW0uICovXG4gICAgc3RhdGljIGFzeW5jIG5ldyhvcHRzKSB7XG4gICAgICAgIHJldHVybiBuZXdNZW51KCdDaGVjaycsIG9wdHMpLnRoZW4oKFtyaWQsIGlkXSkgPT4gbmV3IENoZWNrTWVudUl0ZW0ocmlkLCBpZCkpO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgdGV4dCBvZiB0aGlzIGNoZWNrIG1lbnUgaXRlbS4gKi9cbiAgICBhc3luYyB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXx0ZXh0JywgeyByaWQ6IHRoaXMucmlkLCBraW5kOiB0aGlzLmtpbmQgfSk7XG4gICAgfVxuICAgIC8qKiBTZXRzIHRoZSB0ZXh0IGZvciB0aGlzIGNoZWNrIG1lbnUgaXRlbS4gKi9cbiAgICBhc3luYyBzZXRUZXh0KHRleHQpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZSgncGx1Z2luOm1lbnV8c2V0X3RleHQnLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgd2hldGhlciB0aGlzIGNoZWNrIG1lbnUgaXRlbSBpcyBlbmFibGVkIG9yIG5vdC4gKi9cbiAgICBhc3luYyBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fGlzX2VuYWJsZWQnLCB7IHJpZDogdGhpcy5yaWQsIGtpbmQ6IHRoaXMua2luZCB9KTtcbiAgICB9XG4gICAgLyoqIFNldHMgd2hldGhlciB0aGlzIGNoZWNrIG1lbnUgaXRlbSBpcyBlbmFibGVkIG9yIG5vdC4gKi9cbiAgICBhc3luYyBzZXRFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZSgncGx1Z2luOm1lbnV8c2V0X2VuYWJsZWQnLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgICAgICAgZW5hYmxlZFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIFNldHMgdGhlIGFjY2VsZXJhdG9yIGZvciB0aGlzIGNoZWNrIG1lbnUgaXRlbS4gKi9cbiAgICBhc3luYyBzZXRBY2NlbGVyYXRvcihhY2NlbGVyYXRvcikge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxzZXRfYWNjZWxlcmF0b3InLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgICAgICAgYWNjZWxlcmF0b3JcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBjaGVjayBtZW51IGl0ZW0gaXMgY2hlY2tlZCBvciBub3QuICovXG4gICAgYXN5bmMgaXNDaGVja2VkKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxpc19jaGVja2VkJywgeyByaWQ6IHRoaXMucmlkIH0pO1xuICAgIH1cbiAgICAvKiogU2V0cyB3aGV0aGVyIHRoaXMgY2hlY2sgbWVudSBpdGVtIGlzIGNoZWNrZWQgb3Igbm90LiAqL1xuICAgIGFzeW5jIHNldENoZWNrZWQoY2hlY2tlZCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxzZXRfY2hlY2tlZCcsIHtcbiAgICAgICAgICAgIHJpZDogdGhpcy5yaWQsXG4gICAgICAgICAgICBjaGVja2VkXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQ2hlY2tNZW51SXRlbSB9O1xuIl0sIm5hbWVzIjpbIk1lbnVJdGVtQmFzZSIsIm5ld01lbnUiLCJpbnZva2UiLCJDaGVja01lbnVJdGVtIiwiY29uc3RydWN0b3IiLCJyaWQiLCJpZCIsIm5ldyIsIm9wdHMiLCJ0aGVuIiwidGV4dCIsImtpbmQiLCJzZXRUZXh0IiwiaXNFbmFibGVkIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJzZXRBY2NlbGVyYXRvciIsImFjY2VsZXJhdG9yIiwiaXNDaGVja2VkIiwic2V0Q2hlY2tlZCIsImNoZWNrZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/checkMenuItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/iconMenuItem.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/iconMenuItem.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IconMenuItem: () => (/* binding */ IconMenuItem),\n/* harmony export */   NativeIcon: () => (/* binding */ NativeIcon)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../image.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js\");\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A native Icon to be used for the menu item\n *\n * #### Platform-specific:\n *\n * - **Windows / Linux**: Unsupported.\n */ var NativeIcon;\n(function(NativeIcon) {\n    /** An add item template image. */ NativeIcon[\"Add\"] = \"Add\";\n    /** Advanced preferences toolbar icon for the preferences window. */ NativeIcon[\"Advanced\"] = \"Advanced\";\n    /** A Bluetooth template image. */ NativeIcon[\"Bluetooth\"] = \"Bluetooth\";\n    /** Bookmarks image suitable for a template. */ NativeIcon[\"Bookmarks\"] = \"Bookmarks\";\n    /** A caution image. */ NativeIcon[\"Caution\"] = \"Caution\";\n    /** A color panel toolbar icon. */ NativeIcon[\"ColorPanel\"] = \"ColorPanel\";\n    /** A column view mode template image. */ NativeIcon[\"ColumnView\"] = \"ColumnView\";\n    /** A computer icon. */ NativeIcon[\"Computer\"] = \"Computer\";\n    /** An enter full-screen mode template image. */ NativeIcon[\"EnterFullScreen\"] = \"EnterFullScreen\";\n    /** Permissions for all users. */ NativeIcon[\"Everyone\"] = \"Everyone\";\n    /** An exit full-screen mode template image. */ NativeIcon[\"ExitFullScreen\"] = \"ExitFullScreen\";\n    /** A cover flow view mode template image. */ NativeIcon[\"FlowView\"] = \"FlowView\";\n    /** A folder image. */ NativeIcon[\"Folder\"] = \"Folder\";\n    /** A burnable folder icon. */ NativeIcon[\"FolderBurnable\"] = \"FolderBurnable\";\n    /** A smart folder icon. */ NativeIcon[\"FolderSmart\"] = \"FolderSmart\";\n    /** A link template image. */ NativeIcon[\"FollowLinkFreestanding\"] = \"FollowLinkFreestanding\";\n    /** A font panel toolbar icon. */ NativeIcon[\"FontPanel\"] = \"FontPanel\";\n    /** A `go back` template image. */ NativeIcon[\"GoLeft\"] = \"GoLeft\";\n    /** A `go forward` template image. */ NativeIcon[\"GoRight\"] = \"GoRight\";\n    /** Home image suitable for a template. */ NativeIcon[\"Home\"] = \"Home\";\n    /** An iChat Theater template image. */ NativeIcon[\"IChatTheater\"] = \"IChatTheater\";\n    /** An icon view mode template image. */ NativeIcon[\"IconView\"] = \"IconView\";\n    /** An information toolbar icon. */ NativeIcon[\"Info\"] = \"Info\";\n    /** A template image used to denote invalid data. */ NativeIcon[\"InvalidDataFreestanding\"] = \"InvalidDataFreestanding\";\n    /** A generic left-facing triangle template image. */ NativeIcon[\"LeftFacingTriangle\"] = \"LeftFacingTriangle\";\n    /** A list view mode template image. */ NativeIcon[\"ListView\"] = \"ListView\";\n    /** A locked padlock template image. */ NativeIcon[\"LockLocked\"] = \"LockLocked\";\n    /** An unlocked padlock template image. */ NativeIcon[\"LockUnlocked\"] = \"LockUnlocked\";\n    /** A horizontal dash, for use in menus. */ NativeIcon[\"MenuMixedState\"] = \"MenuMixedState\";\n    /** A check mark template image, for use in menus. */ NativeIcon[\"MenuOnState\"] = \"MenuOnState\";\n    /** A MobileMe icon. */ NativeIcon[\"MobileMe\"] = \"MobileMe\";\n    /** A drag image for multiple items. */ NativeIcon[\"MultipleDocuments\"] = \"MultipleDocuments\";\n    /** A network icon. */ NativeIcon[\"Network\"] = \"Network\";\n    /** A path button template image. */ NativeIcon[\"Path\"] = \"Path\";\n    /** General preferences toolbar icon for the preferences window. */ NativeIcon[\"PreferencesGeneral\"] = \"PreferencesGeneral\";\n    /** A Quick Look template image. */ NativeIcon[\"QuickLook\"] = \"QuickLook\";\n    /** A refresh template image. */ NativeIcon[\"RefreshFreestanding\"] = \"RefreshFreestanding\";\n    /** A refresh template image. */ NativeIcon[\"Refresh\"] = \"Refresh\";\n    /** A remove item template image. */ NativeIcon[\"Remove\"] = \"Remove\";\n    /** A reveal contents template image. */ NativeIcon[\"RevealFreestanding\"] = \"RevealFreestanding\";\n    /** A generic right-facing triangle template image. */ NativeIcon[\"RightFacingTriangle\"] = \"RightFacingTriangle\";\n    /** A share view template image. */ NativeIcon[\"Share\"] = \"Share\";\n    /** A slideshow template image. */ NativeIcon[\"Slideshow\"] = \"Slideshow\";\n    /** A badge for a `smart` item. */ NativeIcon[\"SmartBadge\"] = \"SmartBadge\";\n    /** Small green indicator, similar to iChat’s available image. */ NativeIcon[\"StatusAvailable\"] = \"StatusAvailable\";\n    /** Small clear indicator. */ NativeIcon[\"StatusNone\"] = \"StatusNone\";\n    /** Small yellow indicator, similar to iChat’s idle image. */ NativeIcon[\"StatusPartiallyAvailable\"] = \"StatusPartiallyAvailable\";\n    /** Small red indicator, similar to iChat’s unavailable image. */ NativeIcon[\"StatusUnavailable\"] = \"StatusUnavailable\";\n    /** A stop progress template image. */ NativeIcon[\"StopProgressFreestanding\"] = \"StopProgressFreestanding\";\n    /** A stop progress button template image. */ NativeIcon[\"StopProgress\"] = \"StopProgress\";\n    /** An image of the empty trash can. */ NativeIcon[\"TrashEmpty\"] = \"TrashEmpty\";\n    /** An image of the full trash can. */ NativeIcon[\"TrashFull\"] = \"TrashFull\";\n    /** Permissions for a single user. */ NativeIcon[\"User\"] = \"User\";\n    /** User account toolbar icon for the preferences window. */ NativeIcon[\"UserAccounts\"] = \"UserAccounts\";\n    /** Permissions for a group of users. */ NativeIcon[\"UserGroup\"] = \"UserGroup\";\n    /** Permissions for guests. */ NativeIcon[\"UserGuest\"] = \"UserGuest\";\n})(NativeIcon || (NativeIcon = {}));\n/**\n * An icon menu item inside a {@linkcode Menu} or {@linkcode Submenu}\n * and usually contains an icon and a text.\n */ class IconMenuItem extends _base_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemBase {\n    /** @ignore */ constructor(rid, id){\n        super(rid, id, \"Icon\");\n    }\n    /** Create a new icon menu item. */ static async new(opts) {\n        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.newMenu)(\"Icon\", opts).then(([rid, id])=>new IconMenuItem(rid, id));\n    }\n    /** Returns the text of this icon menu item. */ async text() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|text\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets the text for this icon menu item. */ async setText(text) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_text\", {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this icon menu item is enabled or not. */ async isEnabled() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|is_enabled\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets whether this icon menu item is enabled or not. */ async setEnabled(enabled) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_enabled\", {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /** Sets the accelerator for this icon menu item. */ async setAccelerator(accelerator) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_accelerator\", {\n            rid: this.rid,\n            kind: this.kind,\n            accelerator\n        });\n    }\n    /** Sets an icon for this icon menu item */ async setIcon(icon) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_icon\", {\n            rid: this.rid,\n            icon: (0,_image_js__WEBPACK_IMPORTED_MODULE_2__.transformImage)(icon)\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/iconMenuItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menu.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menu.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Menu: () => (/* binding */ Menu)\n/* harmony export */ });\n/* harmony import */ var _menuItem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menuItem.js\");\n/* harmony import */ var _checkMenuItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/checkMenuItem.js\");\n/* harmony import */ var _iconMenuItem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iconMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/iconMenuItem.js\");\n/* harmony import */ var _predefinedMenuItem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./predefinedMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/predefinedMenuItem.js\");\n/* harmony import */ var _submenu_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./submenu.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/submenu.js\");\n/* harmony import */ var _dpi_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dpi.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js\");\n\n\n\n\n\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nfunction itemFromKind([rid, id, kind]) {\n    /* eslint-disable @typescript-eslint/no-unsafe-return */ switch(kind){\n        case \"Submenu\":\n            // @ts-expect-error constructor is protected for external usage only\n            return new _submenu_js__WEBPACK_IMPORTED_MODULE_4__.Submenu(rid, id);\n        case \"Predefined\":\n            // @ts-expect-error constructor is protected for external usage only\n            return new _predefinedMenuItem_js__WEBPACK_IMPORTED_MODULE_3__.PredefinedMenuItem(rid, id);\n        case \"Check\":\n            // @ts-expect-error constructor is protected for external usage only\n            return new _checkMenuItem_js__WEBPACK_IMPORTED_MODULE_1__.CheckMenuItem(rid, id);\n        case \"Icon\":\n            // @ts-expect-error constructor is protected for external usage only\n            return new _iconMenuItem_js__WEBPACK_IMPORTED_MODULE_2__.IconMenuItem(rid, id);\n        case \"MenuItem\":\n        default:\n            // @ts-expect-error constructor is protected for external usage only\n            return new _menuItem_js__WEBPACK_IMPORTED_MODULE_0__.MenuItem(rid, id);\n    }\n/* eslint-enable @typescript-eslint/no-unsafe-return */ }\n/** A type that is either a menu bar on the window\n * on Windows and Linux or as a global menu in the menubar on macOS.\n */ class Menu extends _base_js__WEBPACK_IMPORTED_MODULE_7__.MenuItemBase {\n    /** @ignore */ constructor(rid, id){\n        super(rid, id, \"Menu\");\n    }\n    /** Create a new menu. */ static async new(opts) {\n        return (0,_base_js__WEBPACK_IMPORTED_MODULE_7__.newMenu)(\"Menu\", opts).then(([rid, id])=>new Menu(rid, id));\n    }\n    /** Create a default menu. */ static async default() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|create_default\").then(([rid, id])=>new Menu(rid, id));\n    }\n    /**\n     * Add a menu item to the end of this menu.\n     *\n     * ## Platform-spcific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */ async append(items) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|append\", {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [\n                items\n            ]).map((i)=>\"rid\" in i ? [\n                    i.rid,\n                    i.kind\n                ] : i)\n        });\n    }\n    /**\n     * Add a menu item to the beginning of this menu.\n     *\n     * ## Platform-spcific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */ async prepend(items) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|prepend\", {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [\n                items\n            ]).map((i)=>\"rid\" in i ? [\n                    i.rid,\n                    i.kind\n                ] : i)\n        });\n    }\n    /**\n     * Add a menu item to the specified position in this menu.\n     *\n     * ## Platform-spcific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */ async insert(items, position) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|insert\", {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [\n                items\n            ]).map((i)=>\"rid\" in i ? [\n                    i.rid,\n                    i.kind\n                ] : i),\n            position\n        });\n    }\n    /** Remove a menu item from this menu. */ async remove(item) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|remove\", {\n            rid: this.rid,\n            kind: this.kind,\n            item: [\n                item.rid,\n                item.kind\n            ]\n        });\n    }\n    /** Remove a menu item from this menu at the specified position. */ async removeAt(position) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|remove_at\", {\n            rid: this.rid,\n            kind: this.kind,\n            position\n        }).then(itemFromKind);\n    }\n    /** Returns a list of menu items that has been added to this menu. */ async items() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|items\", {\n            rid: this.rid,\n            kind: this.kind\n        }).then((i)=>i.map(itemFromKind));\n    }\n    /** Retrieves the menu item matching the given identifier. */ async get(id) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|get\", {\n            rid: this.rid,\n            kind: this.kind,\n            id\n        }).then((r)=>r ? itemFromKind(r) : null);\n    }\n    /**\n     * Popup this menu as a context menu on the specified window.\n     *\n     * If the position, is provided, it is relative to the window's top-left corner.\n     */ async popup(at, window) {\n        var _a;\n        let atValue = null;\n        if (at) {\n            atValue = {};\n            atValue[`${at instanceof _dpi_js__WEBPACK_IMPORTED_MODULE_5__.PhysicalPosition ? \"Physical\" : \"Logical\"}`] = {\n                x: at.x,\n                y: at.y\n            };\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|popup\", {\n            rid: this.rid,\n            kind: this.kind,\n            window: (_a = window === null || window === void 0 ? void 0 : window.label) !== null && _a !== void 0 ? _a : null,\n            at: atValue\n        });\n    }\n    /**\n     * Sets the app-wide menu and returns the previous one.\n     *\n     * If a window was not created with an explicit menu or had one set explicitly,\n     * this menu will be assigned to it.\n     */ async setAsAppMenu() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|set_as_app_menu\", {\n            rid: this.rid\n        }).then((r)=>r ? new Menu(r[0], r[1]) : null);\n    }\n    /**\n     * Sets the window menu and returns the previous one.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Unsupported. The menu on macOS is app-wide and not specific to one\n     * window, if you need to set it, use {@linkcode Menu.setAsAppMenu} instead.\n     */ async setAsWindowMenu(window) {\n        var _a;\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_6__.invoke)(\"plugin:menu|set_as_window_menu\", {\n            rid: this.rid,\n            window: (_a = window === null || window === void 0 ? void 0 : window.label) !== null && _a !== void 0 ? _a : null\n        }).then((r)=>r ? new Menu(r[0], r[1]) : null);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9tZW51L21lbnUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQ1U7QUFDRjtBQUNZO0FBQ3RCO0FBQ007QUFDVDtBQUNjO0FBRWxELHFFQUFxRTtBQUNyRSxzQ0FBc0M7QUFDdEMsK0JBQStCO0FBQy9CLFNBQVNTLGFBQWEsQ0FBQ0MsS0FBS0MsSUFBSUMsS0FBSztJQUNqQyxzREFBc0QsR0FDdEQsT0FBUUE7UUFDSixLQUFLO1lBQ0Qsb0VBQW9FO1lBQ3BFLE9BQU8sSUFBSVIsZ0RBQU9BLENBQUNNLEtBQUtDO1FBQzVCLEtBQUs7WUFDRCxvRUFBb0U7WUFDcEUsT0FBTyxJQUFJUixzRUFBa0JBLENBQUNPLEtBQUtDO1FBQ3ZDLEtBQUs7WUFDRCxvRUFBb0U7WUFDcEUsT0FBTyxJQUFJViw0REFBYUEsQ0FBQ1MsS0FBS0M7UUFDbEMsS0FBSztZQUNELG9FQUFvRTtZQUNwRSxPQUFPLElBQUlULDBEQUFZQSxDQUFDUSxLQUFLQztRQUNqQyxLQUFLO1FBQ0w7WUFDSSxvRUFBb0U7WUFDcEUsT0FBTyxJQUFJWCxrREFBUUEsQ0FBQ1UsS0FBS0M7SUFDakM7QUFDQSxxREFBcUQsR0FDekQ7QUFDQTs7Q0FFQyxHQUNELE1BQU1FLGFBQWFOLGtEQUFZQTtJQUMzQixZQUFZLEdBQ1pPLFlBQVlKLEdBQUcsRUFBRUMsRUFBRSxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0QsS0FBS0MsSUFBSTtJQUNuQjtJQUNBLHVCQUF1QixHQUN2QixhQUFhSSxJQUFJQyxJQUFJLEVBQUU7UUFDbkIsT0FBT1IsaURBQU9BLENBQUMsUUFBUVEsTUFBTUMsSUFBSSxDQUFDLENBQUMsQ0FBQ1AsS0FBS0MsR0FBRyxHQUFLLElBQUlFLEtBQUtILEtBQUtDO0lBQ25FO0lBQ0EsMkJBQTJCLEdBQzNCLGFBQWFPLFVBQVU7UUFDbkIsT0FBT1osZ0RBQU1BLENBQUMsOEJBQThCVyxJQUFJLENBQUMsQ0FBQyxDQUFDUCxLQUFLQyxHQUFHLEdBQUssSUFBSUUsS0FBS0gsS0FBS0M7SUFDbEY7SUFDQTs7Ozs7O0tBTUMsR0FDRCxNQUFNUSxPQUFPQyxLQUFLLEVBQUU7UUFDaEIsT0FBT2QsZ0RBQU1BLENBQUMsc0JBQXNCO1lBQ2hDSSxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiRSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmUSxPQUFPLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsUUFBUTtnQkFBQ0E7YUFBTSxFQUFFRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxTQUFTQSxJQUFJO29CQUFDQSxFQUFFZCxHQUFHO29CQUFFYyxFQUFFWixJQUFJO2lCQUFDLEdBQUdZO1FBQzlGO0lBQ0o7SUFDQTs7Ozs7O0tBTUMsR0FDRCxNQUFNQyxRQUFRTCxLQUFLLEVBQUU7UUFDakIsT0FBT2QsZ0RBQU1BLENBQUMsdUJBQXVCO1lBQ2pDSSxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiRSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmUSxPQUFPLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsUUFBUTtnQkFBQ0E7YUFBTSxFQUFFRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxTQUFTQSxJQUFJO29CQUFDQSxFQUFFZCxHQUFHO29CQUFFYyxFQUFFWixJQUFJO2lCQUFDLEdBQUdZO1FBQzlGO0lBQ0o7SUFDQTs7Ozs7O0tBTUMsR0FDRCxNQUFNRSxPQUFPTixLQUFLLEVBQUVPLFFBQVEsRUFBRTtRQUMxQixPQUFPckIsZ0RBQU1BLENBQUMsc0JBQXNCO1lBQ2hDSSxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiRSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmUSxPQUFPLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsUUFBUTtnQkFBQ0E7YUFBTSxFQUFFRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxTQUFTQSxJQUFJO29CQUFDQSxFQUFFZCxHQUFHO29CQUFFYyxFQUFFWixJQUFJO2lCQUFDLEdBQUdZO1lBQzFGRztRQUNKO0lBQ0o7SUFDQSx1Q0FBdUMsR0FDdkMsTUFBTUMsT0FBT0MsSUFBSSxFQUFFO1FBQ2YsT0FBT3ZCLGdEQUFNQSxDQUFDLHNCQUFzQjtZQUNoQ0ksS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFDYkUsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZmlCLE1BQU07Z0JBQUNBLEtBQUtuQixHQUFHO2dCQUFFbUIsS0FBS2pCLElBQUk7YUFBQztRQUMvQjtJQUNKO0lBQ0EsaUVBQWlFLEdBQ2pFLE1BQU1rQixTQUFTSCxRQUFRLEVBQUU7UUFDckIsT0FBT3JCLGdEQUFNQSxDQUFDLHlCQUF5QjtZQUNuQ0ksS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFDYkUsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZmU7UUFDSixHQUFHVixJQUFJLENBQUNSO0lBQ1o7SUFDQSxtRUFBbUUsR0FDbkUsTUFBTVcsUUFBUTtRQUNWLE9BQU9kLGdEQUFNQSxDQUFDLHFCQUFxQjtZQUMvQkksS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFDYkUsTUFBTSxJQUFJLENBQUNBLElBQUk7UUFDbkIsR0FBR0ssSUFBSSxDQUFDLENBQUNPLElBQU1BLEVBQUVELEdBQUcsQ0FBQ2Q7SUFDekI7SUFDQSwyREFBMkQsR0FDM0QsTUFBTXNCLElBQUlwQixFQUFFLEVBQUU7UUFDVixPQUFPTCxnREFBTUEsQ0FBQyxtQkFBbUI7WUFDN0JJLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQ2JFLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZEO1FBQ0osR0FBR00sSUFBSSxDQUFDLENBQUNlLElBQU9BLElBQUl2QixhQUFhdUIsS0FBSztJQUMxQztJQUNBOzs7O0tBSUMsR0FDRCxNQUFNQyxNQUFNQyxFQUFFLEVBQUVDLE1BQU0sRUFBRTtRQUNwQixJQUFJQztRQUNKLElBQUlDLFVBQVU7UUFDZCxJQUFJSCxJQUFJO1lBQ0pHLFVBQVUsQ0FBQztZQUNYQSxPQUFPLENBQUMsQ0FBQyxFQUFFSCxjQUFjN0IscURBQWdCQSxHQUFHLGFBQWEsVUFBVSxDQUFDLENBQUMsR0FBRztnQkFDcEVpQyxHQUFHSixHQUFHSSxDQUFDO2dCQUNQQyxHQUFHTCxHQUFHSyxDQUFDO1lBQ1g7UUFDSjtRQUNBLE9BQU9qQyxnREFBTUEsQ0FBQyxxQkFBcUI7WUFDL0JJLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQ2JFLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2Z1QixRQUFRLENBQUNDLEtBQUtELFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPSyxLQUFLLE1BQU0sUUFBUUosT0FBTyxLQUFLLElBQUlBLEtBQUs7WUFDN0dGLElBQUlHO1FBQ1I7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUksZUFBZTtRQUNqQixPQUFPbkMsZ0RBQU1BLENBQUMsK0JBQStCO1lBQ3pDSSxLQUFLLElBQUksQ0FBQ0EsR0FBRztRQUNqQixHQUFHTyxJQUFJLENBQUMsQ0FBQ2UsSUFBT0EsSUFBSSxJQUFJbkIsS0FBS21CLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFLElBQUk7SUFDL0M7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsTUFBTVUsZ0JBQWdCUCxNQUFNLEVBQUU7UUFDMUIsSUFBSUM7UUFDSixPQUFPOUIsZ0RBQU1BLENBQUMsa0NBQWtDO1lBQzVDSSxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNieUIsUUFBUSxDQUFDQyxLQUFLRCxXQUFXLFFBQVFBLFdBQVcsS0FBSyxJQUFJLEtBQUssSUFBSUEsT0FBT0ssS0FBSyxNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1FBQ2pILEdBQUduQixJQUFJLENBQUMsQ0FBQ2UsSUFBT0EsSUFBSSxJQUFJbkIsS0FBS21CLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFLElBQUk7SUFDL0M7QUFDSjtBQUVnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvbWVudS9tZW51LmpzPzRkNTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVudUl0ZW0gfSBmcm9tICcuL21lbnVJdGVtLmpzJztcbmltcG9ydCB7IENoZWNrTWVudUl0ZW0gfSBmcm9tICcuL2NoZWNrTWVudUl0ZW0uanMnO1xuaW1wb3J0IHsgSWNvbk1lbnVJdGVtIH0gZnJvbSAnLi9pY29uTWVudUl0ZW0uanMnO1xuaW1wb3J0IHsgUHJlZGVmaW5lZE1lbnVJdGVtIH0gZnJvbSAnLi9wcmVkZWZpbmVkTWVudUl0ZW0uanMnO1xuaW1wb3J0IHsgU3VibWVudSB9IGZyb20gJy4vc3VibWVudS5qcyc7XG5pbXBvcnQgeyBQaHlzaWNhbFBvc2l0aW9uIH0gZnJvbSAnLi4vZHBpLmpzJztcbmltcG9ydCB7IGludm9rZSB9IGZyb20gJy4uL2NvcmUuanMnO1xuaW1wb3J0IHsgTWVudUl0ZW1CYXNlLCBuZXdNZW51IH0gZnJvbSAnLi9iYXNlLmpzJztcblxuLy8gQ29weXJpZ2h0IDIwMTktMjAyNCBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuZnVuY3Rpb24gaXRlbUZyb21LaW5kKFtyaWQsIGlkLCBraW5kXSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuICovXG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgJ1N1Ym1lbnUnOlxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBjb25zdHJ1Y3RvciBpcyBwcm90ZWN0ZWQgZm9yIGV4dGVybmFsIHVzYWdlIG9ubHlcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3VibWVudShyaWQsIGlkKTtcbiAgICAgICAgY2FzZSAnUHJlZGVmaW5lZCc6XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNvbnN0cnVjdG9yIGlzIHByb3RlY3RlZCBmb3IgZXh0ZXJuYWwgdXNhZ2Ugb25seVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcmVkZWZpbmVkTWVudUl0ZW0ocmlkLCBpZCk7XG4gICAgICAgIGNhc2UgJ0NoZWNrJzpcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgY29uc3RydWN0b3IgaXMgcHJvdGVjdGVkIGZvciBleHRlcm5hbCB1c2FnZSBvbmx5XG4gICAgICAgICAgICByZXR1cm4gbmV3IENoZWNrTWVudUl0ZW0ocmlkLCBpZCk7XG4gICAgICAgIGNhc2UgJ0ljb24nOlxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBjb25zdHJ1Y3RvciBpcyBwcm90ZWN0ZWQgZm9yIGV4dGVybmFsIHVzYWdlIG9ubHlcbiAgICAgICAgICAgIHJldHVybiBuZXcgSWNvbk1lbnVJdGVtKHJpZCwgaWQpO1xuICAgICAgICBjYXNlICdNZW51SXRlbSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNvbnN0cnVjdG9yIGlzIHByb3RlY3RlZCBmb3IgZXh0ZXJuYWwgdXNhZ2Ugb25seVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNZW51SXRlbShyaWQsIGlkKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVybiAqL1xufVxuLyoqIEEgdHlwZSB0aGF0IGlzIGVpdGhlciBhIG1lbnUgYmFyIG9uIHRoZSB3aW5kb3dcbiAqIG9uIFdpbmRvd3MgYW5kIExpbnV4IG9yIGFzIGEgZ2xvYmFsIG1lbnUgaW4gdGhlIG1lbnViYXIgb24gbWFjT1MuXG4gKi9cbmNsYXNzIE1lbnUgZXh0ZW5kcyBNZW51SXRlbUJhc2Uge1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgY29uc3RydWN0b3IocmlkLCBpZCkge1xuICAgICAgICBzdXBlcihyaWQsIGlkLCAnTWVudScpO1xuICAgIH1cbiAgICAvKiogQ3JlYXRlIGEgbmV3IG1lbnUuICovXG4gICAgc3RhdGljIGFzeW5jIG5ldyhvcHRzKSB7XG4gICAgICAgIHJldHVybiBuZXdNZW51KCdNZW51Jywgb3B0cykudGhlbigoW3JpZCwgaWRdKSA9PiBuZXcgTWVudShyaWQsIGlkKSk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYSBkZWZhdWx0IG1lbnUuICovXG4gICAgc3RhdGljIGFzeW5jIGRlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fGNyZWF0ZV9kZWZhdWx0JykudGhlbigoW3JpZCwgaWRdKSA9PiBuZXcgTWVudShyaWQsIGlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIG1lbnUgaXRlbSB0byB0aGUgZW5kIG9mIHRoaXMgbWVudS5cbiAgICAgKlxuICAgICAqICMjIFBsYXRmb3JtLXNwY2lmaWM6XG4gICAgICpcbiAgICAgKiAtICoqbWFjT1M6KiogT25seSB7QGxpbmtjb2RlIFN1Ym1lbnV9cyBjYW4gYmUgYWRkZWQgdG8gYSB7QGxpbmtjb2RlIE1lbnV9LlxuICAgICAqL1xuICAgIGFzeW5jIGFwcGVuZChpdGVtcykge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxhcHBlbmQnLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgICAgICAgaXRlbXM6IChBcnJheS5pc0FycmF5KGl0ZW1zKSA/IGl0ZW1zIDogW2l0ZW1zXSkubWFwKChpKSA9PiAncmlkJyBpbiBpID8gW2kucmlkLCBpLmtpbmRdIDogaSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIG1lbnUgaXRlbSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgbWVudS5cbiAgICAgKlxuICAgICAqICMjIFBsYXRmb3JtLXNwY2lmaWM6XG4gICAgICpcbiAgICAgKiAtICoqbWFjT1M6KiogT25seSB7QGxpbmtjb2RlIFN1Ym1lbnV9cyBjYW4gYmUgYWRkZWQgdG8gYSB7QGxpbmtjb2RlIE1lbnV9LlxuICAgICAqL1xuICAgIGFzeW5jIHByZXBlbmQoaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZSgncGx1Z2luOm1lbnV8cHJlcGVuZCcsIHtcbiAgICAgICAgICAgIHJpZDogdGhpcy5yaWQsXG4gICAgICAgICAgICBraW5kOiB0aGlzLmtpbmQsXG4gICAgICAgICAgICBpdGVtczogKEFycmF5LmlzQXJyYXkoaXRlbXMpID8gaXRlbXMgOiBbaXRlbXNdKS5tYXAoKGkpID0+ICdyaWQnIGluIGkgPyBbaS5yaWQsIGkua2luZF0gOiBpKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbWVudSBpdGVtIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gaW4gdGhpcyBtZW51LlxuICAgICAqXG4gICAgICogIyMgUGxhdGZvcm0tc3BjaWZpYzpcbiAgICAgKlxuICAgICAqIC0gKiptYWNPUzoqKiBPbmx5IHtAbGlua2NvZGUgU3VibWVudX1zIGNhbiBiZSBhZGRlZCB0byBhIHtAbGlua2NvZGUgTWVudX0uXG4gICAgICovXG4gICAgYXN5bmMgaW5zZXJ0KGl0ZW1zLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxpbnNlcnQnLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgICAgICAgaXRlbXM6IChBcnJheS5pc0FycmF5KGl0ZW1zKSA/IGl0ZW1zIDogW2l0ZW1zXSkubWFwKChpKSA9PiAncmlkJyBpbiBpID8gW2kucmlkLCBpLmtpbmRdIDogaSksXG4gICAgICAgICAgICBwb3NpdGlvblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIFJlbW92ZSBhIG1lbnUgaXRlbSBmcm9tIHRoaXMgbWVudS4gKi9cbiAgICBhc3luYyByZW1vdmUoaXRlbSkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxyZW1vdmUnLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgICAgICAgaXRlbTogW2l0ZW0ucmlkLCBpdGVtLmtpbmRdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogUmVtb3ZlIGEgbWVudSBpdGVtIGZyb20gdGhpcyBtZW51IGF0IHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uICovXG4gICAgYXN5bmMgcmVtb3ZlQXQocG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGludm9rZSgncGx1Z2luOm1lbnV8cmVtb3ZlX2F0Jywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZCxcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICAgICAgICAgIHBvc2l0aW9uXG4gICAgICAgIH0pLnRoZW4oaXRlbUZyb21LaW5kKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBsaXN0IG9mIG1lbnUgaXRlbXMgdGhhdCBoYXMgYmVlbiBhZGRlZCB0byB0aGlzIG1lbnUuICovXG4gICAgYXN5bmMgaXRlbXMoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fGl0ZW1zJywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZCxcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZFxuICAgICAgICB9KS50aGVuKChpKSA9PiBpLm1hcChpdGVtRnJvbUtpbmQpKTtcbiAgICB9XG4gICAgLyoqIFJldHJpZXZlcyB0aGUgbWVudSBpdGVtIG1hdGNoaW5nIHRoZSBnaXZlbiBpZGVudGlmaWVyLiAqL1xuICAgIGFzeW5jIGdldChpZCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxnZXQnLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgICAgICAgaWRcbiAgICAgICAgfSkudGhlbigocikgPT4gKHIgPyBpdGVtRnJvbUtpbmQocikgOiBudWxsKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBvcHVwIHRoaXMgbWVudSBhcyBhIGNvbnRleHQgbWVudSBvbiB0aGUgc3BlY2lmaWVkIHdpbmRvdy5cbiAgICAgKlxuICAgICAqIElmIHRoZSBwb3NpdGlvbiwgaXMgcHJvdmlkZWQsIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSB3aW5kb3cncyB0b3AtbGVmdCBjb3JuZXIuXG4gICAgICovXG4gICAgYXN5bmMgcG9wdXAoYXQsIHdpbmRvdykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBhdFZhbHVlID0gbnVsbDtcbiAgICAgICAgaWYgKGF0KSB7XG4gICAgICAgICAgICBhdFZhbHVlID0ge307XG4gICAgICAgICAgICBhdFZhbHVlW2Ake2F0IGluc3RhbmNlb2YgUGh5c2ljYWxQb3NpdGlvbiA/ICdQaHlzaWNhbCcgOiAnTG9naWNhbCd9YF0gPSB7XG4gICAgICAgICAgICAgICAgeDogYXQueCxcbiAgICAgICAgICAgICAgICB5OiBhdC55XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fHBvcHVwJywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZCxcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICAgICAgICAgIHdpbmRvdzogKF9hID0gd2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmxhYmVsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsLFxuICAgICAgICAgICAgYXQ6IGF0VmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFwcC13aWRlIG1lbnUgYW5kIHJldHVybnMgdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgKlxuICAgICAqIElmIGEgd2luZG93IHdhcyBub3QgY3JlYXRlZCB3aXRoIGFuIGV4cGxpY2l0IG1lbnUgb3IgaGFkIG9uZSBzZXQgZXhwbGljaXRseSxcbiAgICAgKiB0aGlzIG1lbnUgd2lsbCBiZSBhc3NpZ25lZCB0byBpdC5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRBc0FwcE1lbnUoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fHNldF9hc19hcHBfbWVudScsIHtcbiAgICAgICAgICAgIHJpZDogdGhpcy5yaWRcbiAgICAgICAgfSkudGhlbigocikgPT4gKHIgPyBuZXcgTWVudShyWzBdLCByWzFdKSA6IG51bGwpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgd2luZG93IG1lbnUgYW5kIHJldHVybnMgdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgKlxuICAgICAqICMjIyMgUGxhdGZvcm0tc3BlY2lmaWM6XG4gICAgICpcbiAgICAgKiAtICoqbWFjT1M6KiogVW5zdXBwb3J0ZWQuIFRoZSBtZW51IG9uIG1hY09TIGlzIGFwcC13aWRlIGFuZCBub3Qgc3BlY2lmaWMgdG8gb25lXG4gICAgICogd2luZG93LCBpZiB5b3UgbmVlZCB0byBzZXQgaXQsIHVzZSB7QGxpbmtjb2RlIE1lbnUuc2V0QXNBcHBNZW51fSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGFzeW5jIHNldEFzV2luZG93TWVudSh3aW5kb3cpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxzZXRfYXNfd2luZG93X21lbnUnLCB7XG4gICAgICAgICAgICByaWQ6IHRoaXMucmlkLFxuICAgICAgICAgICAgd2luZG93OiAoX2EgPSB3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cubGFiZWwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGxcbiAgICAgICAgfSkudGhlbigocikgPT4gKHIgPyBuZXcgTWVudShyWzBdLCByWzFdKSA6IG51bGwpKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IE1lbnUgfTtcbiJdLCJuYW1lcyI6WyJNZW51SXRlbSIsIkNoZWNrTWVudUl0ZW0iLCJJY29uTWVudUl0ZW0iLCJQcmVkZWZpbmVkTWVudUl0ZW0iLCJTdWJtZW51IiwiUGh5c2ljYWxQb3NpdGlvbiIsImludm9rZSIsIk1lbnVJdGVtQmFzZSIsIm5ld01lbnUiLCJpdGVtRnJvbUtpbmQiLCJyaWQiLCJpZCIsImtpbmQiLCJNZW51IiwiY29uc3RydWN0b3IiLCJuZXciLCJvcHRzIiwidGhlbiIsImRlZmF1bHQiLCJhcHBlbmQiLCJpdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImkiLCJwcmVwZW5kIiwiaW5zZXJ0IiwicG9zaXRpb24iLCJyZW1vdmUiLCJpdGVtIiwicmVtb3ZlQXQiLCJnZXQiLCJyIiwicG9wdXAiLCJhdCIsIndpbmRvdyIsIl9hIiwiYXRWYWx1ZSIsIngiLCJ5IiwibGFiZWwiLCJzZXRBc0FwcE1lbnUiLCJzZXRBc1dpbmRvd01lbnUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menuItem.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menuItem.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MenuItem: () => (/* binding */ MenuItem)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** A menu item inside a {@linkcode Menu} or {@linkcode Submenu} and contains only text. */ class MenuItem extends _base_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemBase {\n    /** @ignore */ constructor(rid, id){\n        super(rid, id, \"MenuItem\");\n    }\n    /** Create a new menu item. */ static async new(opts) {\n        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.newMenu)(\"MenuItem\", opts).then(([rid, id])=>new MenuItem(rid, id));\n    }\n    /** Returns the text of this menu item. */ async text() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|text\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets the text for this menu item. */ async setText(text) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_text\", {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this menu item is enabled or not. */ async isEnabled() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|is_enabled\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets whether this menu item is enabled or not. */ async setEnabled(enabled) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_enabled\", {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /** Sets the accelerator for this menu item. */ async setAccelerator(accelerator) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_accelerator\", {\n            rid: this.rid,\n            kind: this.kind,\n            accelerator\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9tZW51L21lbnVJdGVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNkO0FBRXBDLHFFQUFxRTtBQUNyRSxzQ0FBc0M7QUFDdEMsK0JBQStCO0FBQy9CLHlGQUF5RixHQUN6RixNQUFNRyxpQkFBaUJILGtEQUFZQTtJQUMvQixZQUFZLEdBQ1pJLFlBQVlDLEdBQUcsRUFBRUMsRUFBRSxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0QsS0FBS0MsSUFBSTtJQUNuQjtJQUNBLDRCQUE0QixHQUM1QixhQUFhQyxJQUFJQyxJQUFJLEVBQUU7UUFDbkIsT0FBT1AsaURBQU9BLENBQUMsWUFBWU8sTUFBTUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0osS0FBS0MsR0FBRyxHQUFLLElBQUlILFNBQVNFLEtBQUtDO0lBQzNFO0lBQ0Esd0NBQXdDLEdBQ3hDLE1BQU1JLE9BQU87UUFDVCxPQUFPUixnREFBTUEsQ0FBQyxvQkFBb0I7WUFBRUcsS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFBRU0sTUFBTSxJQUFJLENBQUNBLElBQUk7UUFBQztJQUN2RTtJQUNBLHNDQUFzQyxHQUN0QyxNQUFNQyxRQUFRRixJQUFJLEVBQUU7UUFDaEIsT0FBT1IsZ0RBQU1BLENBQUMsd0JBQXdCO1lBQ2xDRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiTSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmRDtRQUNKO0lBQ0o7SUFDQSxzREFBc0QsR0FDdEQsTUFBTUcsWUFBWTtRQUNkLE9BQU9YLGdEQUFNQSxDQUFDLDBCQUEwQjtZQUFFRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUFFTSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUFDO0lBQzdFO0lBQ0EsbURBQW1ELEdBQ25ELE1BQU1HLFdBQVdDLE9BQU8sRUFBRTtRQUN0QixPQUFPYixnREFBTUEsQ0FBQywyQkFBMkI7WUFDckNHLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQ2JNLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZJO1FBQ0o7SUFDSjtJQUNBLDZDQUE2QyxHQUM3QyxNQUFNQyxlQUFlQyxXQUFXLEVBQUU7UUFDOUIsT0FBT2YsZ0RBQU1BLENBQUMsK0JBQStCO1lBQ3pDRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiTSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmTTtRQUNKO0lBQ0o7QUFDSjtBQUVvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvbWVudS9tZW51SXRlbS5qcz84YTJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1lbnVJdGVtQmFzZSwgbmV3TWVudSB9IGZyb20gJy4vYmFzZS5qcyc7XG5pbXBvcnQgeyBpbnZva2UgfSBmcm9tICcuLi9jb3JlLmpzJztcblxuLy8gQ29weXJpZ2h0IDIwMTktMjAyNCBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLyoqIEEgbWVudSBpdGVtIGluc2lkZSBhIHtAbGlua2NvZGUgTWVudX0gb3Ige0BsaW5rY29kZSBTdWJtZW51fSBhbmQgY29udGFpbnMgb25seSB0ZXh0LiAqL1xuY2xhc3MgTWVudUl0ZW0gZXh0ZW5kcyBNZW51SXRlbUJhc2Uge1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgY29uc3RydWN0b3IocmlkLCBpZCkge1xuICAgICAgICBzdXBlcihyaWQsIGlkLCAnTWVudUl0ZW0nKTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZSBhIG5ldyBtZW51IGl0ZW0uICovXG4gICAgc3RhdGljIGFzeW5jIG5ldyhvcHRzKSB7XG4gICAgICAgIHJldHVybiBuZXdNZW51KCdNZW51SXRlbScsIG9wdHMpLnRoZW4oKFtyaWQsIGlkXSkgPT4gbmV3IE1lbnVJdGVtKHJpZCwgaWQpKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIHRleHQgb2YgdGhpcyBtZW51IGl0ZW0uICovXG4gICAgYXN5bmMgdGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZSgncGx1Z2luOm1lbnV8dGV4dCcsIHsgcmlkOiB0aGlzLnJpZCwga2luZDogdGhpcy5raW5kIH0pO1xuICAgIH1cbiAgICAvKiogU2V0cyB0aGUgdGV4dCBmb3IgdGhpcyBtZW51IGl0ZW0uICovXG4gICAgYXN5bmMgc2V0VGV4dCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fHNldF90ZXh0Jywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZCxcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICAgICAgICAgIHRleHRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBtZW51IGl0ZW0gaXMgZW5hYmxlZCBvciBub3QuICovXG4gICAgYXN5bmMgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxpc19lbmFibGVkJywgeyByaWQ6IHRoaXMucmlkLCBraW5kOiB0aGlzLmtpbmQgfSk7XG4gICAgfVxuICAgIC8qKiBTZXRzIHdoZXRoZXIgdGhpcyBtZW51IGl0ZW0gaXMgZW5hYmxlZCBvciBub3QuICovXG4gICAgYXN5bmMgc2V0RW5hYmxlZChlbmFibGVkKSB7XG4gICAgICAgIHJldHVybiBpbnZva2UoJ3BsdWdpbjptZW51fHNldF9lbmFibGVkJywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZCxcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICAgICAgICAgIGVuYWJsZWRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBTZXRzIHRoZSBhY2NlbGVyYXRvciBmb3IgdGhpcyBtZW51IGl0ZW0uICovXG4gICAgYXN5bmMgc2V0QWNjZWxlcmF0b3IoYWNjZWxlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZSgncGx1Z2luOm1lbnV8c2V0X2FjY2VsZXJhdG9yJywge1xuICAgICAgICAgICAgcmlkOiB0aGlzLnJpZCxcbiAgICAgICAgICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICAgICAgICAgIGFjY2VsZXJhdG9yXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTWVudUl0ZW0gfTtcbiJdLCJuYW1lcyI6WyJNZW51SXRlbUJhc2UiLCJuZXdNZW51IiwiaW52b2tlIiwiTWVudUl0ZW0iLCJjb25zdHJ1Y3RvciIsInJpZCIsImlkIiwibmV3Iiwib3B0cyIsInRoZW4iLCJ0ZXh0Iiwia2luZCIsInNldFRleHQiLCJpc0VuYWJsZWQiLCJzZXRFbmFibGVkIiwiZW5hYmxlZCIsInNldEFjY2VsZXJhdG9yIiwiYWNjZWxlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menuItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/predefinedMenuItem.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/predefinedMenuItem.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PredefinedMenuItem: () => (/* binding */ PredefinedMenuItem)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** A predefined (native) menu item which has a predefined behavior by the OS or by tauri.  */ class PredefinedMenuItem extends _base_js__WEBPACK_IMPORTED_MODULE_0__.MenuItemBase {\n    /** @ignore */ constructor(rid, id){\n        super(rid, id, \"Predefined\");\n    }\n    /** Create a new predefined menu item. */ static async new(opts) {\n        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.newMenu)(\"Predefined\", opts).then(([rid, id])=>new PredefinedMenuItem(rid, id));\n    }\n    /** Returns the text of this predefined menu item. */ async text() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|text\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets the text for this predefined menu item. */ async setText(text) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.invoke)(\"plugin:menu|set_text\", {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDIuMC4wLWJldGEuMTEvbm9kZV9tb2R1bGVzL0B0YXVyaS1hcHBzL2FwaS9tZW51L3ByZWRlZmluZWRNZW51SXRlbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0Q7QUFDZDtBQUVwQyxxRUFBcUU7QUFDckUsc0NBQXNDO0FBQ3RDLCtCQUErQjtBQUMvQiw0RkFBNEYsR0FDNUYsTUFBTUcsMkJBQTJCSCxrREFBWUE7SUFDekMsWUFBWSxHQUNaSSxZQUFZQyxHQUFHLEVBQUVDLEVBQUUsQ0FBRTtRQUNqQixLQUFLLENBQUNELEtBQUtDLElBQUk7SUFDbkI7SUFDQSx1Q0FBdUMsR0FDdkMsYUFBYUMsSUFBSUMsSUFBSSxFQUFFO1FBQ25CLE9BQU9QLGlEQUFPQSxDQUFDLGNBQWNPLE1BQU1DLElBQUksQ0FBQyxDQUFDLENBQUNKLEtBQUtDLEdBQUcsR0FBSyxJQUFJSCxtQkFBbUJFLEtBQUtDO0lBQ3ZGO0lBQ0EsbURBQW1ELEdBQ25ELE1BQU1JLE9BQU87UUFDVCxPQUFPUixnREFBTUEsQ0FBQyxvQkFBb0I7WUFBRUcsS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFBRU0sTUFBTSxJQUFJLENBQUNBLElBQUk7UUFBQztJQUN2RTtJQUNBLGlEQUFpRCxHQUNqRCxNQUFNQyxRQUFRRixJQUFJLEVBQUU7UUFDaEIsT0FBT1IsZ0RBQU1BLENBQUMsd0JBQXdCO1lBQ2xDRyxLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiTSxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmRDtRQUNKO0lBQ0o7QUFDSjtBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2xvY2FsLWZpcnN0LXRhdXJpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0YXVyaS1hcHBzK2FwaUAyLjAuMC1iZXRhLjExL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvbWVudS9wcmVkZWZpbmVkTWVudUl0ZW0uanM/ZmYxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZW51SXRlbUJhc2UsIG5ld01lbnUgfSBmcm9tICcuL2Jhc2UuanMnO1xuaW1wb3J0IHsgaW52b2tlIH0gZnJvbSAnLi4vY29yZS5qcyc7XG5cbi8vIENvcHlyaWdodCAyMDE5LTIwMjQgVGF1cmkgUHJvZ3JhbW1lIHdpdGhpbiBUaGUgQ29tbW9ucyBDb25zZXJ2YW5jeVxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8qKiBBIHByZWRlZmluZWQgKG5hdGl2ZSkgbWVudSBpdGVtIHdoaWNoIGhhcyBhIHByZWRlZmluZWQgYmVoYXZpb3IgYnkgdGhlIE9TIG9yIGJ5IHRhdXJpLiAgKi9cbmNsYXNzIFByZWRlZmluZWRNZW51SXRlbSBleHRlbmRzIE1lbnVJdGVtQmFzZSB7XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBjb25zdHJ1Y3RvcihyaWQsIGlkKSB7XG4gICAgICAgIHN1cGVyKHJpZCwgaWQsICdQcmVkZWZpbmVkJyk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYSBuZXcgcHJlZGVmaW5lZCBtZW51IGl0ZW0uICovXG4gICAgc3RhdGljIGFzeW5jIG5ldyhvcHRzKSB7XG4gICAgICAgIHJldHVybiBuZXdNZW51KCdQcmVkZWZpbmVkJywgb3B0cykudGhlbigoW3JpZCwgaWRdKSA9PiBuZXcgUHJlZGVmaW5lZE1lbnVJdGVtKHJpZCwgaWQpKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIHRleHQgb2YgdGhpcyBwcmVkZWZpbmVkIG1lbnUgaXRlbS4gKi9cbiAgICBhc3luYyB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXx0ZXh0JywgeyByaWQ6IHRoaXMucmlkLCBraW5kOiB0aGlzLmtpbmQgfSk7XG4gICAgfVxuICAgIC8qKiBTZXRzIHRoZSB0ZXh0IGZvciB0aGlzIHByZWRlZmluZWQgbWVudSBpdGVtLiAqL1xuICAgIGFzeW5jIHNldFRleHQodGV4dCkge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdwbHVnaW46bWVudXxzZXRfdGV4dCcsIHtcbiAgICAgICAgICAgIHJpZDogdGhpcy5yaWQsXG4gICAgICAgICAgICBraW5kOiB0aGlzLmtpbmQsXG4gICAgICAgICAgICB0ZXh0XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgUHJlZGVmaW5lZE1lbnVJdGVtIH07XG4iXSwibmFtZXMiOlsiTWVudUl0ZW1CYXNlIiwibmV3TWVudSIsImludm9rZSIsIlByZWRlZmluZWRNZW51SXRlbSIsImNvbnN0cnVjdG9yIiwicmlkIiwiaWQiLCJuZXciLCJvcHRzIiwidGhlbiIsInRleHQiLCJraW5kIiwic2V0VGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/predefinedMenuItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/submenu.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/submenu.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Submenu: () => (/* binding */ Submenu)\n/* harmony export */ });\n/* harmony import */ var _menuItem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/menuItem.js\");\n/* harmony import */ var _checkMenuItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/checkMenuItem.js\");\n/* harmony import */ var _iconMenuItem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iconMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/iconMenuItem.js\");\n/* harmony import */ var _predefinedMenuItem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./predefinedMenuItem.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/predefinedMenuItem.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../window.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/window.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/base.js\");\n/* harmony import */ var _dpi_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dpi.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js\");\n\n\n\n\n\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nfunction itemFromKind([rid, id, kind]) {\n    /* eslint-disable @typescript-eslint/no-unsafe-return */ switch(kind){\n        case \"Submenu\":\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new Submenu(rid, id);\n        case \"Predefined\":\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new _predefinedMenuItem_js__WEBPACK_IMPORTED_MODULE_3__.PredefinedMenuItem(rid, id);\n        case \"Check\":\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new _checkMenuItem_js__WEBPACK_IMPORTED_MODULE_1__.CheckMenuItem(rid, id);\n        case \"Icon\":\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new _iconMenuItem_js__WEBPACK_IMPORTED_MODULE_2__.IconMenuItem(rid, id);\n        case \"MenuItem\":\n        default:\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new _menuItem_js__WEBPACK_IMPORTED_MODULE_0__.MenuItem(rid, id);\n    }\n/* eslint-enable @typescript-eslint/no-unsafe-return */ }\n/** A type that is a submenu inside a {@linkcode Menu} or {@linkcode Submenu}. */ class Submenu extends _base_js__WEBPACK_IMPORTED_MODULE_6__.MenuItemBase {\n    /** @ignore */ constructor(rid, id){\n        super(rid, id, \"Submenu\");\n    }\n    /** Create a new submenu. */ static async new(opts) {\n        return (0,_base_js__WEBPACK_IMPORTED_MODULE_6__.newMenu)(\"Submenu\", opts).then(([rid, id])=>new Submenu(rid, id));\n    }\n    /** Returns the text of this submenu. */ async text() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|text\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets the text for this submenu. */ async setText(text) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|set_text\", {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this submenu is enabled or not. */ async isEnabled() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|is_enabled\", {\n            rid: this.rid,\n            kind: this.kind\n        });\n    }\n    /** Sets whether this submenu is enabled or not. */ async setEnabled(enabled) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|set_enabled\", {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /**\n     * Add a menu item to the end of this submenu.\n     *\n     * ## Platform-spcific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */ async append(items) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|append\", {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [\n                items\n            ]).map((i)=>\"rid\" in i ? [\n                    i.rid,\n                    i.kind\n                ] : i)\n        });\n    }\n    /**\n     * Add a menu item to the beginning of this submenu.\n     *\n     * ## Platform-spcific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */ async prepend(items) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|prepend\", {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [\n                items\n            ]).map((i)=>\"rid\" in i ? [\n                    i.rid,\n                    i.kind\n                ] : i)\n        });\n    }\n    /**\n     * Add a menu item to the specified position in this submenu.\n     *\n     * ## Platform-spcific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */ async insert(items, position) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|insert\", {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [\n                items\n            ]).map((i)=>\"rid\" in i ? [\n                    i.rid,\n                    i.kind\n                ] : i),\n            position\n        });\n    }\n    /** Remove a menu item from this submenu. */ async remove(item) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|remove\", {\n            rid: this.rid,\n            kind: this.kind,\n            item: [\n                item.rid,\n                item.kind\n            ]\n        });\n    }\n    /** Remove a menu item from this submenu at the specified position. */ async removeAt(position) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|remove_at\", {\n            rid: this.rid,\n            kind: this.kind,\n            position\n        }).then(itemFromKind);\n    }\n    /** Returns a list of menu items that has been added to this submenu. */ async items() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|items\", {\n            rid: this.rid,\n            kind: this.kind\n        }).then((i)=>i.map(itemFromKind));\n    }\n    /** Retrieves the menu item matching the given identifier. */ async get(id) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|get\", {\n            rid: this.rid,\n            kind: this.kind,\n            id\n        }).then((r)=>r ? itemFromKind(r) : null);\n    }\n    /**\n     * Popup this submenu as a context menu on the specified window.\n     *\n     * If the position, is provided, it is relative to the window's top-left corner.\n     */ async popup(at, window) {\n        var _a;\n        let atValue = null;\n        if (at) {\n            atValue = {};\n            atValue[`${at instanceof _dpi_js__WEBPACK_IMPORTED_MODULE_7__.PhysicalPosition ? \"Physical\" : \"Logical\"}`] = {\n                x: at.x,\n                y: at.y\n            };\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|popup\", {\n            rid: this.rid,\n            kind: this.kind,\n            window: (_a = window === null || window === void 0 ? void 0 : window.label) !== null && _a !== void 0 ? _a : null,\n            at: atValue\n        });\n    }\n    /**\n     * Set this submenu as the Window menu for the application on macOS.\n     *\n     * This will cause macOS to automatically add window-switching items and\n     * certain other items to the menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows / Linux**: Unsupported.\n     */ async setAsWindowsMenuForNSApp() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|set_as_windows_menu_for_nsapp\", {\n            rid: this.rid\n        });\n    }\n    /**\n     * Set this submenu as the Help menu for the application on macOS.\n     *\n     * This will cause macOS to automatically add a search box to the menu.\n     *\n     * If no menu is set as the Help menu, macOS will automatically use any menu\n     * which has a title matching the localized word \"Help\".\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows / Linux**: Unsupported.\n     */ async setAsHelpMenuForNSApp() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_4__.invoke)(\"plugin:menu|set_as_help_menu_for_nsapp\", {\n            rid: this.rid\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/menu/submenu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/path.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/path.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDirectory: () => (/* binding */ BaseDirectory),\n/* harmony export */   appCacheDir: () => (/* binding */ appCacheDir),\n/* harmony export */   appConfigDir: () => (/* binding */ appConfigDir),\n/* harmony export */   appDataDir: () => (/* binding */ appDataDir),\n/* harmony export */   appLocalDataDir: () => (/* binding */ appLocalDataDir),\n/* harmony export */   appLogDir: () => (/* binding */ appLogDir),\n/* harmony export */   audioDir: () => (/* binding */ audioDir),\n/* harmony export */   basename: () => (/* binding */ basename),\n/* harmony export */   cacheDir: () => (/* binding */ cacheDir),\n/* harmony export */   configDir: () => (/* binding */ configDir),\n/* harmony export */   dataDir: () => (/* binding */ dataDir),\n/* harmony export */   delimiter: () => (/* binding */ delimiter),\n/* harmony export */   desktopDir: () => (/* binding */ desktopDir),\n/* harmony export */   dirname: () => (/* binding */ dirname),\n/* harmony export */   documentDir: () => (/* binding */ documentDir),\n/* harmony export */   downloadDir: () => (/* binding */ downloadDir),\n/* harmony export */   executableDir: () => (/* binding */ executableDir),\n/* harmony export */   extname: () => (/* binding */ extname),\n/* harmony export */   fontDir: () => (/* binding */ fontDir),\n/* harmony export */   homeDir: () => (/* binding */ homeDir),\n/* harmony export */   isAbsolute: () => (/* binding */ isAbsolute),\n/* harmony export */   join: () => (/* binding */ join),\n/* harmony export */   localDataDir: () => (/* binding */ localDataDir),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   pictureDir: () => (/* binding */ pictureDir),\n/* harmony export */   publicDir: () => (/* binding */ publicDir),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   resolveResource: () => (/* binding */ resolveResource),\n/* harmony export */   resourceDir: () => (/* binding */ resourceDir),\n/* harmony export */   runtimeDir: () => (/* binding */ runtimeDir),\n/* harmony export */   sep: () => (/* binding */ sep),\n/* harmony export */   tempDir: () => (/* binding */ tempDir),\n/* harmony export */   templateDir: () => (/* binding */ templateDir),\n/* harmony export */   videoDir: () => (/* binding */ videoDir)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The path module provides utilities for working with file and directory paths.\n *\n * This package is also accessible with `window.__TAURI__.path` when [`app.withGlobalTauri`](https://tauri.app/v1/api/config/#appconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */ /**\n * @since 2.0.0\n */ var BaseDirectory;\n(function(BaseDirectory) {\n    BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\n    BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\n    BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\n    BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\n    BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\n    BaseDirectory[BaseDirectory[\"Document\"] = 6] = \"Document\";\n    BaseDirectory[BaseDirectory[\"Download\"] = 7] = \"Download\";\n    BaseDirectory[BaseDirectory[\"Picture\"] = 8] = \"Picture\";\n    BaseDirectory[BaseDirectory[\"Public\"] = 9] = \"Public\";\n    BaseDirectory[BaseDirectory[\"Video\"] = 10] = \"Video\";\n    BaseDirectory[BaseDirectory[\"Resource\"] = 11] = \"Resource\";\n    BaseDirectory[BaseDirectory[\"Temp\"] = 12] = \"Temp\";\n    BaseDirectory[BaseDirectory[\"AppConfig\"] = 13] = \"AppConfig\";\n    BaseDirectory[BaseDirectory[\"AppData\"] = 14] = \"AppData\";\n    BaseDirectory[BaseDirectory[\"AppLocalData\"] = 15] = \"AppLocalData\";\n    BaseDirectory[BaseDirectory[\"AppCache\"] = 16] = \"AppCache\";\n    BaseDirectory[BaseDirectory[\"AppLog\"] = 17] = \"AppLog\";\n    BaseDirectory[BaseDirectory[\"Desktop\"] = 18] = \"Desktop\";\n    BaseDirectory[BaseDirectory[\"Executable\"] = 19] = \"Executable\";\n    BaseDirectory[BaseDirectory[\"Font\"] = 20] = \"Font\";\n    BaseDirectory[BaseDirectory[\"Home\"] = 21] = \"Home\";\n    BaseDirectory[BaseDirectory[\"Runtime\"] = 22] = \"Runtime\";\n    BaseDirectory[BaseDirectory[\"Template\"] = 23] = \"Template\";\n})(BaseDirectory || (BaseDirectory = {}));\n/**\n * Returns the path to the suggested directory for your app's config files.\n * Resolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appConfigDir } from '@tauri-apps/api/path';\n * const appConfigDirPath = await appConfigDir();\n * ```\n *\n * @since 1.2.0\n */ async function appConfigDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.AppConfig\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's data files.\n * Resolves to `${dataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * ```\n *\n * @since 1.2.0\n */ async function appDataDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.AppData\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's local data files.\n * Resolves to `${localDataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appLocalDataDir } from '@tauri-apps/api/path';\n * const appLocalDataDirPath = await appLocalDataDir();\n * ```\n *\n * @since 1.2.0\n */ async function appLocalDataDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.AppLocalData\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's cache files.\n * Resolves to `${cacheDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appCacheDir } from '@tauri-apps/api/path';\n * const appCacheDirPath = await appCacheDir();\n * ```\n *\n * @since 1.2.0\n */ async function appCacheDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.AppCache\n    });\n}\n/**\n * Returns the path to the user's audio directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\n * - **macOS:** Resolves to `$HOME/Music`.\n * - **Windows:** Resolves to `{FOLDERID_Music}`.\n * @example\n * ```typescript\n * import { audioDir } from '@tauri-apps/api/path';\n * const audioDirPath = await audioDir();\n * ```\n *\n * @since 1.0.0\n */ async function audioDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Audio\n    });\n}\n/**\n * Returns the path to the user's cache directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n * - **macOS:** Resolves to `$HOME/Library/Caches`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { cacheDir } from '@tauri-apps/api/path';\n * const cacheDirPath = await cacheDir();\n * ```\n *\n * @since 1.0.0\n */ async function cacheDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Cache\n    });\n}\n/**\n * Returns the path to the user's config directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { configDir } from '@tauri-apps/api/path';\n * const configDirPath = await configDir();\n * ```\n *\n * @since 1.0.0\n */ async function configDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Config\n    });\n}\n/**\n * Returns the path to the user's data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { dataDir } from '@tauri-apps/api/path';\n * const dataDirPath = await dataDir();\n * ```\n *\n * @since 1.0.0\n */ async function dataDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Data\n    });\n}\n/**\n * Returns the path to the user's desktop directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\n * - **macOS:** Resolves to `$HOME/Desktop`.\n * - **Windows:** Resolves to `{FOLDERID_Desktop}`.\n * @example\n * ```typescript\n * import { desktopDir } from '@tauri-apps/api/path';\n * const desktopPath = await desktopDir();\n * ```\n *\n * @since 1.0.0\n */ async function desktopDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Desktop\n    });\n}\n/**\n * Returns the path to the user's document directory.\n * @example\n * ```typescript\n * import { documentDir } from '@tauri-apps/api/path';\n * const documentDirPath = await documentDir();\n * ```\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\n * - **macOS:** Resolves to `$HOME/Documents`.\n * - **Windows:** Resolves to `{FOLDERID_Documents}`.\n *\n * @since 1.0.0\n */ async function documentDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Document\n    });\n}\n/**\n * Returns the path to the user's download directory.\n *\n * #### Platform-specific\n *\n * - **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\n * - **macOS**: Resolves to `$HOME/Downloads`.\n * - **Windows**: Resolves to `{FOLDERID_Downloads}`.\n * @example\n * ```typescript\n * import { downloadDir } from '@tauri-apps/api/path';\n * const downloadDirPath = await downloadDir();\n * ```\n *\n * @since 1.0.0\n */ async function downloadDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Download\n    });\n}\n/**\n * Returns the path to the user's executable directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { executableDir } from '@tauri-apps/api/path';\n * const executableDirPath = await executableDir();\n * ```\n *\n * @since 1.0.0\n */ async function executableDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Executable\n    });\n}\n/**\n * Returns the path to the user's font directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n * - **macOS:** Resolves to `$HOME/Library/Fonts`.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { fontDir } from '@tauri-apps/api/path';\n * const fontDirPath = await fontDir();\n * ```\n *\n * @since 1.0.0\n */ async function fontDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Font\n    });\n}\n/**\n * Returns the path to the user's home directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$HOME`.\n * - **macOS:** Resolves to `$HOME`.\n * - **Windows:** Resolves to `{FOLDERID_Profile}`.\n * @example\n * ```typescript\n * import { homeDir } from '@tauri-apps/api/path';\n * const homeDirPath = await homeDir();\n * ```\n *\n * @since 1.0.0\n */ async function homeDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Home\n    });\n}\n/**\n * Returns the path to the user's local data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { localDataDir } from '@tauri-apps/api/path';\n * const localDataDirPath = await localDataDir();\n * ```\n *\n * @since 1.0.0\n */ async function localDataDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.LocalData\n    });\n}\n/**\n * Returns the path to the user's picture directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\n * - **macOS:** Resolves to `$HOME/Pictures`.\n * - **Windows:** Resolves to `{FOLDERID_Pictures}`.\n * @example\n * ```typescript\n * import { pictureDir } from '@tauri-apps/api/path';\n * const pictureDirPath = await pictureDir();\n * ```\n *\n * @since 1.0.0\n */ async function pictureDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Picture\n    });\n}\n/**\n * Returns the path to the user's public directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\n * - **macOS:** Resolves to `$HOME/Public`.\n * - **Windows:** Resolves to `{FOLDERID_Public}`.\n * @example\n * ```typescript\n * import { publicDir } from '@tauri-apps/api/path';\n * const publicDirPath = await publicDir();\n * ```\n *\n * @since 1.0.0\n */ async function publicDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Public\n    });\n}\n/**\n * Returns the path to the application's resource directory.\n * To resolve a resource path, see the [[resolveResource | `resolveResource API`]].\n * @example\n * ```typescript\n * import { resourceDir } from '@tauri-apps/api/path';\n * const resourceDirPath = await resourceDir();\n * ```\n *\n * @since 1.0.0\n */ async function resourceDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Resource\n    });\n}\n/**\n * Resolve the path to a resource file.\n * @example\n * ```typescript\n * import { resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('script.sh');\n * ```\n *\n * @param resourcePath The path to the resource.\n * Must follow the same syntax as defined in `tauri.conf.json > bundle > resources`, i.e. keeping subfolders and parent dir components (`../`).\n * @returns The full path to the resource.\n *\n * @since 1.0.0\n */ async function resolveResource(resourcePath) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Resource,\n        path: resourcePath\n    });\n}\n/**\n * Returns the path to the user's runtime directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { runtimeDir } from '@tauri-apps/api/path';\n * const runtimeDirPath = await runtimeDir();\n * ```\n *\n * @since 1.0.0\n */ async function runtimeDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Runtime\n    });\n}\n/**\n * Returns the path to the user's template directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Resolves to `{FOLDERID_Templates}`.\n * @example\n * ```typescript\n * import { templateDir } from '@tauri-apps/api/path';\n * const templateDirPath = await templateDir();\n * ```\n *\n * @since 1.0.0\n */ async function templateDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Template\n    });\n}\n/**\n * Returns the path to the user's video directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\n * - **macOS:** Resolves to `$HOME/Movies`.\n * - **Windows:** Resolves to `{FOLDERID_Videos}`.\n * @example\n * ```typescript\n * import { videoDir } from '@tauri-apps/api/path';\n * const videoDirPath = await videoDir();\n * ```\n *\n * @since 1.0.0\n */ async function videoDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Video\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's log files.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * - **macOS:** Resolves to `${homeDir}/Library/Logs/{bundleIdentifier}`\n * - **Windows:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * @example\n * ```typescript\n * import { appLogDir } from '@tauri-apps/api/path';\n * const appLogDirPath = await appLogDir();\n * ```\n *\n * @since 1.2.0\n */ async function appLogDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.AppLog\n    });\n}\n/**\n * Returns a temporary directory.\n * @example\n * ```typescript\n * import { tempDir } from '@tauri-apps/api/path';\n * const temp = await tempDir();\n * ```\n *\n * @since 2.0.0\n */ async function tempDir() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve_directory\", {\n        directory: BaseDirectory.Temp\n    });\n}\n/**\n * Returns the platform-specific path segment separator:\n * - `\\` on Windows\n * - `/` on POSIX\n *\n * @since 2.0.0\n */ function sep() {\n    return window.__TAURI_INTERNALS__.plugins.path.sep;\n}\n/**\n * Returns the platform-specific path segment delimiter:\n * - `;` on Windows\n * - `:` on POSIX\n *\n * @since 2.0.0\n */ function delimiter() {\n    return window.__TAURI_INTERNALS__.plugins.path.delimiter;\n}\n/**\n * Resolves a sequence of `paths` or `path` segments into an absolute path.\n * @example\n * ```typescript\n * import { resolve, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await resolve(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */ async function resolve(...paths) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|resolve\", {\n        paths\n    });\n}\n/**\n * Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symbolic links.\n * @example\n * ```typescript\n * import { normalize, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await normalize(`${appDataDirPath}/../users/tauri/avatar.png`);\n * ```\n *\n * @since 1.0.0\n */ async function normalize(path) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|normalize\", {\n        path\n    });\n}\n/**\n *  Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\n * @example\n * ```typescript\n * import { join, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await join(appDataDirPath, 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */ async function join(...paths) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|join\", {\n        paths\n    });\n}\n/**\n * Returns the directory name of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { dirname } from '@tauri-apps/api/path';\n * const dir = await dirname('/path/to/somedir/');\n * assert(dir === 'somedir');\n * ```\n *\n * @since 1.0.0\n */ async function dirname(path) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|dirname\", {\n        path\n    });\n}\n/**\n * Returns the extension of the `path`.\n * @example\n * ```typescript\n * import { extname } from '@tauri-apps/api/path';\n * const ext = await extname('/path/to/file.html');\n * assert(ext === 'html');\n * ```\n *\n * @since 1.0.0\n */ async function extname(path) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|extname\", {\n        path\n    });\n}\n/**\n * Returns the last portion of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { basename } from '@tauri-apps/api/path';\n * const base = await basename('path/to/app.conf');\n * assert(base === 'app.conf');\n * ```\n * @param ext An optional file extension to be removed from the returned path.\n *\n * @since 1.0.0\n */ async function basename(path, ext) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|basename\", {\n        path,\n        ext\n    });\n}\n/**\n * Returns whether the path is absolute or not.\n * @example\n * ```typescript\n * import { isAbsolute } from '@tauri-apps/api/path';\n * assert(await isAbsolute('/home/tauri'));\n * ```\n *\n * @since 1.0.0\n */ async function isAbsolute(path) {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:path|isAbsolute\", {\n        path\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/path.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/tray.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/tray.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrayIcon: () => (/* binding */ TrayIcon)\n/* harmony export */ });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js\");\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Tray icon class and associated methods. This type constructor is private,\n * instead, you should use the static method {@linkcode TrayIcon.new}.\n *\n * #### Warning\n *\n * Unlike Rust, javascript does not have any way to run cleanup code\n * when an object is being removed by garbage collection, but this tray icon\n * will be cleaned up when the tauri app exists, however if you want to cleanup\n * this object early, you need to call {@linkcode TrayIcon.close}.\n *\n * @example\n * ```ts\n * import { TrayIcon } from '@tauri-apps/api/tray';\n * const tray = await TrayIcon.new({ tooltip: 'awesome tray tooltip' });\n * tray.set_tooltip('new tooltip');\n * ```\n */ class TrayIcon extends _core_js__WEBPACK_IMPORTED_MODULE_0__.Resource {\n    constructor(rid, id){\n        super(rid);\n        this.id = id;\n    }\n    /** Gets a tray icon using the provided id. */ static async getById(id) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|get_by_id\", {\n            id\n        }).then((rid)=>rid ? new TrayIcon(rid, id) : null);\n    }\n    /**\n     * Removes a tray icon using the provided id from tauri's internal state.\n     *\n     * Note that this may cause the tray icon to disappear\n     * if it wasn't cloned somewhere else or referenced by JS.\n     */ static async removeById(id) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|remove_by_id\", {\n            id\n        });\n    }\n    /**\n     * Creates a new {@linkcode TrayIcon}\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** Sometimes the icon won't be visible unless a menu is set.\n     * Setting an empty {@linkcode Menu} is enough.\n     */ static async new(options) {\n        if (options === null || options === void 0 ? void 0 : options.menu) {\n            // @ts-expect-error we only need the rid and kind\n            options.menu = [\n                options.menu.rid,\n                options.menu.kind\n            ];\n        }\n        if (options === null || options === void 0 ? void 0 : options.icon) {\n            options.icon = (0,_image_js__WEBPACK_IMPORTED_MODULE_1__.transformImage)(options.icon);\n        }\n        const handler = new _core_js__WEBPACK_IMPORTED_MODULE_0__.Channel();\n        if (options === null || options === void 0 ? void 0 : options.action) {\n            handler.onmessage = options.action;\n            delete options.action;\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|new\", {\n            options: options !== null && options !== void 0 ? options : {},\n            handler\n        }).then(([rid, id])=>new TrayIcon(rid, id));\n    }\n    /**\n     *  Sets a new tray icon. If `null` is provided, it will remove the icon.\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */ async setIcon(icon) {\n        let trayIcon = null;\n        if (icon) {\n            trayIcon = (0,_image_js__WEBPACK_IMPORTED_MODULE_1__.transformImage)(icon);\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_icon\", {\n            rid: this.rid,\n            icon: trayIcon\n        });\n    }\n    /**\n     * Sets a new tray menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: once a menu is set it cannot be removed so `null` has no effect\n     */ async setMenu(menu) {\n        if (menu) {\n            // @ts-expect-error we only need the rid and kind\n            menu = [\n                menu.rid,\n                menu.kind\n            ];\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_menu\", {\n            rid: this.rid,\n            menu\n        });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * ## Platform-specific:\n     *\n     * - **Linux:** Unsupported\n     */ async setTooltip(tooltip) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_tooltip\", {\n            rid: this.rid,\n            tooltip\n        });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * ## Platform-specific:\n     *\n     * - **Linux:** The title will not be shown unless there is an icon\n     * as well.  The title is useful for numerical and other frequently\n     * updated information.  In general, it shouldn't be shown unless a\n     * user requests it as it can take up a significant amount of space\n     * on the user's panel.  This may not be shown in all visualizations.\n     * - **Windows:** Unsupported\n     */ async setTitle(title) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_title\", {\n            rid: this.rid,\n            title\n        });\n    }\n    /** Show or hide this tray icon. */ async setVisible(visible) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_visible\", {\n            rid: this.rid,\n            visible\n        });\n    }\n    /**\n     * Sets the tray icon temp dir path. **Linux only**.\n     *\n     * On Linux, we need to write the icon to the disk and usually it will\n     * be `$XDG_RUNTIME_DIR/tray-icon` or `$TEMP/tray-icon`.\n     */ async setTempDirPath(path) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_temp_dir_path\", {\n            rid: this.rid,\n            path\n        });\n    }\n    /** Sets the current icon as a [template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc). **macOS only** */ async setIconAsTemplate(asTemplate) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_icon_as_template\", {\n            rid: this.rid,\n            asTemplate\n        });\n    }\n    /** Disable or enable showing the tray menu on left click. **macOS only**. */ async setMenuOnLeftClick(onLeft) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:tray|set_show_menu_on_left_click\", {\n            rid: this.rid,\n            onLeft\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/tray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webview.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webview.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Webview: () => (/* binding */ Webview),\n/* harmony export */   getAll: () => (/* binding */ getAll),\n/* harmony export */   getCurrent: () => (/* binding */ getCurrent)\n/* harmony export */ });\n/* harmony import */ var _dpi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dpi.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js\");\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/event.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./window.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/window.js\");\n\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create webviews, communicate with other webviews and manipulate the current webview.\n *\n * ## Webview events\n *\n * Events can be listened to using {@link Webview.listen}:\n * ```typescript\n * import { getCurrent } from \"@tauri-apps/api/webview\";\n * getCurrent().listen(\"my-webview-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */ /**\n * Get an instance of `Webview` for the current webview.\n *\n * @since 2.0.0\n */ function getCurrent() {\n    return new Webview((0,_window_js__WEBPACK_IMPORTED_MODULE_3__.getCurrent)(), window.__TAURI_INTERNALS__.metadata.currentWebview.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Webview` for all available webviews.\n *\n * @since 2.0.0\n */ function getAll() {\n    return window.__TAURI_INTERNALS__.metadata.webviews.map((w)=>// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        new Webview(_window_js__WEBPACK_IMPORTED_MODULE_3__.Window.getByLabel(w.windowLabel), w.label, {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            skip: true\n        }));\n}\n/** @ignore */ // events that are emitted right here instead of by the created webview\nconst localTauriEvents = [\n    \"tauri://created\",\n    \"tauri://error\"\n];\n/**\n * Create new webview or get a handle to an existing one.\n *\n * Webviews are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n * import { Webview } from \"@tauri-apps/api/webview\"\n *\n * const appWindow = new Window('uniqueLabel');\n *\n * // loading embedded asset:\n * const webview = new Webview(appWindow, 'theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const webview = new Webview(appWindow, 'theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * webview.once('tauri://created', function () {\n *  // webview successfully created\n * });\n * webview.once('tauri://error', function (e) {\n *  // an error happened creating the webview\n * });\n *\n * // emit an event to the backend\n * await webview.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await webview.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */ class Webview {\n    /**\n     * Creates a new Webview.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window'\n     * import { Webview } from '@tauri-apps/api/webview'\n     * const appWindow = new Window('my-label')\n     * const webview = new Webview(appWindow, 'my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview\n     * });\n     * ```\n     *\n     * @param window the window to add this webview to.\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Webview} instance to communicate with the webview.\n     */ constructor(window1, label, options){\n        this.window = window1;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|create_webview\", {\n                windowLabel: window1.label,\n                label,\n                options\n            }).then(async ()=>this.emit(\"tauri://created\")).catch(async (e)=>this.emit(\"tauri://error\", e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webview';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */ static getByLabel(label) {\n        var _a;\n        return (_a = getAll().find((w)=>w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */ static getCurrent() {\n        return getCurrent();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */ static getAll() {\n        return getAll();\n    }\n    /**\n     * Listen to an emitted event on this webview.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrent().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(()=>{\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.listen)(event, handler, {\n            target: {\n                kind: \"Webview\",\n                label: this.label\n            }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(()=>{\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.once)(event, handler, {\n            target: {\n                kind: \"Webview\",\n                label: this.label\n            }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * await getCurrent().emit('webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */ async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []){\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return Promise.resolve();\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.emit)(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * await getCurrent().emitTo('main', 'webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */ async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []){\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return Promise.resolve();\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.emitTo)(target, event, payload);\n    }\n    /** @ignore */ _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [\n                    handler\n                ];\n            } else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The position of the top-left hand corner of the webview's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * const position = await getCurrent().position();\n     * ```\n     *\n     * @returns The webview's position.\n     */ async position() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|webview_position\", {\n            label: this.label\n        }).then(({ x, y })=>new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalPosition(x, y));\n    }\n    /**\n     * The physical size of the webview's client area.\n     * The client area is the content of the webview, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * const size = await getCurrent().size();\n     * ```\n     *\n     * @returns The webview's size.\n     */ async size() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|webview_size\", {\n            label: this.label\n        }).then(({ width, height })=>new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalSize(width, height));\n    }\n    // Setters\n    /**\n     * Closes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * await getCurrent().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async close() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|close\", {\n            label: this.label\n        });\n    }\n    /**\n     * Resizes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/api/webview';\n     * await getCurrent().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical size.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setSize(size) {\n        if (!size || size.type !== \"Logical\" && size.type !== \"Physical\") {\n            throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");\n        }\n        const value = {};\n        value[`${size.type}`] = {\n            width: size.width,\n            height: size.height\n        };\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|set_webview_size\", {\n            label: this.label,\n            value\n        });\n    }\n    /**\n     * Sets the webview position.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/api/webview';\n     * await getCurrent().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setPosition(position) {\n        if (!position || position.type !== \"Logical\" && position.type !== \"Physical\") {\n            throw new Error(\"the `position` argument must be either a LogicalPosition or a PhysicalPosition instance\");\n        }\n        const value = {};\n        value[`${position.type}`] = {\n            x: position.x,\n            y: position.y\n        };\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|set_webview_position\", {\n            label: this.label,\n            value\n        });\n    }\n    /**\n     * Bring the webview to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * await getCurrent().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setFocus() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|set_webview_focus\", {\n            label: this.label\n        });\n    }\n    /**\n     * Set webview zoom level.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * await getCurrent().setZoom(1.5);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setZoom(scaleFactor) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|set_webview_zoom\", {\n            label: this.label,\n            value: scaleFactor\n        });\n    }\n    /**\n     * Moves this webview to the given label.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/webview';\n     * await getCurrent().reparent('other-window');\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async reparent(window1) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:webview|set_webview_focus\", {\n            label: this.label,\n            window: typeof window1 === \"string\" ? window1 : window1.label\n        });\n    }\n    // Listeners\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrent().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'hover') {\n     *    console.log('User hovering', event.payload.paths);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async onDragDropEvent(handler) {\n        const unlistenDrag = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DRAG, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"dragged\",\n                    paths: event.payload.paths,\n                    position: mapPhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDrop = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DROP, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"dropped\",\n                    paths: event.payload.paths,\n                    position: mapPhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DROP_CANCELLED, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"dragOver\",\n                    position: mapPhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenCancel = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DROP_CANCELLED, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"cancelled\"\n                }\n            });\n        });\n        return ()=>{\n            unlistenDrag();\n            unlistenDrop();\n            unlistenDragOver();\n            unlistenCancel();\n        };\n    }\n}\nfunction mapPhysicalPosition(m) {\n    return new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalPosition(m.x, m.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webview.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webviewWindow.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webviewWindow.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebviewWindow: () => (/* binding */ WebviewWindow),\n/* harmony export */   getAll: () => (/* binding */ getAll),\n/* harmony export */   getCurrent: () => (/* binding */ getCurrent)\n/* harmony export */ });\n/* harmony import */ var _webview_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webview.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webview.js\");\n/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./window.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/window.js\");\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/event.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Get an instance of `Webview` for the current webview window.\n *\n * @since 2.0.0\n */ function getCurrent() {\n    const webview = (0,_webview_js__WEBPACK_IMPORTED_MODULE_0__.getCurrent)();\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    return new WebviewWindow(webview.label, {\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Webview` for all available webview windows.\n *\n * @since 2.0.0\n */ function getAll() {\n    return window.__TAURI_INTERNALS__.metadata.webviews.map((w)=>// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        new WebviewWindow(w.label, {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            skip: true\n        }));\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass WebviewWindow {\n    /**\n     * Creates a new {@link Window} hosting a {@link Webview}.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow'\n     * const webview = new WebviewWindow('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview\n     * });\n     * ```\n     *\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link WebviewWindow} instance to communicate with the window and webview.\n     */ constructor(label, options = {}){\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            (0,_core_js__WEBPACK_IMPORTED_MODULE_3__.invoke)(\"plugin:webview|create_webview_window\", {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === \"string\" ? options.parent : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            }).then(async ()=>this.emit(\"tauri://created\")).catch(async (e)=>this.emit(\"tauri://error\", e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webviewWindow';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */ static getByLabel(label) {\n        var _a;\n        const webview = (_a = getAll().find((w)=>w.label === label)) !== null && _a !== void 0 ? _a : null;\n        if (webview) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new WebviewWindow(webview.label, {\n                skip: true\n            });\n        }\n        return null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */ static getCurrent() {\n        return getCurrent();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */ static getAll() {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        return getAll().map((w)=>new WebviewWindow(w.label, {\n                skip: true\n            }));\n    }\n    /**\n     * Listen to an emitted event on this webivew window.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(()=>{\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_2__.listen)(event, handler, {\n            target: {\n                kind: \"WebviewWindow\",\n                label: this.label\n            }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview window only once.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(()=>{\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_2__.once)(event, handler, {\n            target: {\n                kind: \"WebviewWindow\",\n                label: this.label\n            }\n        });\n    }\n}\n// Order matters, we use window APIs by default\napplyMixins(WebviewWindow, [\n    _window_js__WEBPACK_IMPORTED_MODULE_1__.Window,\n    _webview_js__WEBPACK_IMPORTED_MODULE_0__.Webview\n]);\n/** Extends a base class by other specified classes, without overriding existing properties */ function applyMixins(baseClass, extendedClasses) {\n    (Array.isArray(extendedClasses) ? extendedClasses : [\n        extendedClasses\n    ]).forEach((extendedClass)=>{\n        Object.getOwnPropertyNames(extendedClass.prototype).forEach((name)=>{\n            var _a;\n            if (typeof baseClass.prototype === \"object\" && baseClass.prototype && name in baseClass.prototype) return;\n            Object.defineProperty(baseClass.prototype, name, // eslint-disable-next-line\n            (_a = Object.getOwnPropertyDescriptor(extendedClass.prototype, name)) !== null && _a !== void 0 ? _a : Object.create(null));\n        });\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/webviewWindow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/window.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/window.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloseRequestedEvent: () => (/* binding */ CloseRequestedEvent),\n/* harmony export */   Effect: () => (/* binding */ Effect),\n/* harmony export */   EffectState: () => (/* binding */ EffectState),\n/* harmony export */   LogicalPosition: () => (/* reexport safe */ _dpi_js__WEBPACK_IMPORTED_MODULE_0__.LogicalPosition),\n/* harmony export */   LogicalSize: () => (/* reexport safe */ _dpi_js__WEBPACK_IMPORTED_MODULE_0__.LogicalSize),\n/* harmony export */   PhysicalPosition: () => (/* reexport safe */ _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalPosition),\n/* harmony export */   PhysicalSize: () => (/* reexport safe */ _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalSize),\n/* harmony export */   ProgressBarStatus: () => (/* binding */ ProgressBarStatus),\n/* harmony export */   UserAttentionType: () => (/* binding */ UserAttentionType),\n/* harmony export */   Window: () => (/* binding */ Window),\n/* harmony export */   availableMonitors: () => (/* binding */ availableMonitors),\n/* harmony export */   currentMonitor: () => (/* binding */ currentMonitor),\n/* harmony export */   cursorPosition: () => (/* binding */ cursorPosition),\n/* harmony export */   getAll: () => (/* binding */ getAll),\n/* harmony export */   getCurrent: () => (/* binding */ getCurrent),\n/* harmony export */   primaryMonitor: () => (/* binding */ primaryMonitor)\n/* harmony export */ });\n/* harmony import */ var _dpi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dpi.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/dpi.js\");\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/event.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/core.js\");\n/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./image.js */ \"(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/image.js\");\n\n\n\n\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * ## Window events\n *\n * Events can be listened to using {@link Window.listen}:\n * ```typescript\n * import { getCurrent } from \"@tauri-apps/api/window\";\n * getCurrent().listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */ /**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */ var UserAttentionType;\n(function(UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */ UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */ UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n    constructor(event){\n        this._preventDefault = false;\n        this.event = event.event;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\nvar ProgressBarStatus;\n(function(ProgressBarStatus) {\n    /**\n     * Hide progress bar.\n     */ ProgressBarStatus[\"None\"] = \"none\";\n    /**\n     * Normal state.\n     */ ProgressBarStatus[\"Normal\"] = \"normal\";\n    /**\n     * Indeterminate state. **Treated as Normal on Linux and macOS**\n     */ ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\n    /**\n     * Paused state. **Treated as Normal on Linux**\n     */ ProgressBarStatus[\"Paused\"] = \"paused\";\n    /**\n     * Error state. **Treated as Normal on linux**\n     */ ProgressBarStatus[\"Error\"] = \"error\";\n})(ProgressBarStatus || (ProgressBarStatus = {}));\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 1.0.0\n */ function getCurrent() {\n    return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 1.0.0\n */ function getAll() {\n    return window.__TAURI_INTERNALS__.metadata.windows.map((w)=>new Window(w.label, {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            skip: true\n        }));\n}\n/** @ignore */ // events that are emitted right here instead of by the created window\nconst localTauriEvents = [\n    \"tauri://created\",\n    \"tauri://error\"\n];\n/**\n * Create new window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n *\n * const appWindow = new Window('theUniqueLabel');\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */ class Window {\n    /**\n     * Creates a new Window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const appWindow = new Window('my-label');\n     * appWindow.once('tauri://created', function () {\n     *  // window successfully created\n     * });\n     * appWindow.once('tauri://error', function (e) {\n     *  // an error happened creating the window\n     * });\n     * ```\n     *\n     * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Window} instance to communicate with the window.\n     */ constructor(label, options = {}){\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|create\", {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === \"string\" ? options.parent : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            }).then(async ()=>this.emit(\"tauri://created\")).catch(async (e)=>this.emit(\"tauri://error\", e));\n        }\n    }\n    /**\n     * Gets the Window associated with the given label.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const mainWindow = Window.getByLabel('main');\n     * ```\n     *\n     * @param label The window label.\n     * @returns The Window instance to communicate with the window or null if the window doesn't exist.\n     */ static getByLabel(label) {\n        var _a;\n        return (_a = getAll().find((w)=>w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Window` for the current window.\n     */ static getCurrent() {\n        return getCurrent();\n    }\n    /**\n     * Gets a list of instances of `Window` for all available windows.\n     */ static getAll() {\n        return getAll();\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const focusedWindow = Window.getFocusedWindow();\n     * ```\n     *\n     * @returns The Window instance or `undefined` if there is not any focused window.\n     */ static async getFocusedWindow() {\n        for (const w of getAll()){\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n    /**\n     * Listen to an emitted event on this window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrent().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(()=>{\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.listen)(event, handler, {\n            target: {\n                kind: \"Window\",\n                label: this.label\n            }\n        });\n    }\n    /**\n     * Listen to an emitted event on this window only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(()=>{\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.once)(event, handler, {\n            target: {\n                kind: \"Window\",\n                label: this.label\n            }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */ async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []){\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return Promise.resolve();\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.emit)(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */ async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []){\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return Promise.resolve();\n        }\n        return (0,_event_js__WEBPACK_IMPORTED_MODULE_1__.emitTo)(target, event, payload);\n    }\n    /** @ignore */ _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [\n                    handler\n                ];\n            } else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const factor = await getCurrent().scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     */ async scaleFactor() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|scale_factor\", {\n            label: this.label\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const position = await getCurrent().innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     */ async innerPosition() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|inner_position\", {\n            label: this.label\n        }).then(({ x, y })=>new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalPosition(x, y));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const position = await getCurrent().outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     */ async outerPosition() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|outer_position\", {\n            label: this.label\n        }).then(({ x, y })=>new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalPosition(x, y));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const size = await getCurrent().innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */ async innerSize() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|inner_size\", {\n            label: this.label\n        }).then(({ width, height })=>new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalSize(width, height));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const size = await getCurrent().outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */ async outerSize() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|outer_size\", {\n            label: this.label\n        }).then(({ width, height })=>new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalSize(width, height));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const fullscreen = await getCurrent().isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     */ async isFullscreen() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_fullscreen\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const minimized = await getCurrent().isMinimized();\n     * ```\n     */ async isMinimized() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_minimized\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const maximized = await getCurrent().isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     */ async isMaximized() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_maximized\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const focused = await getCurrent().isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     */ async isFocused() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_focused\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const decorated = await getCurrent().isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     */ async isDecorated() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_decorated\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const resizable = await getCurrent().isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     */ async isResizable() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_resizable\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window’s native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const maximizable = await getCurrent().isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     */ async isMaximizable() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_maximizable\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window’s native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const minimizable = await getCurrent().isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     */ async isMinimizable() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_minimizable\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window’s native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const closable = await getCurrent().isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     */ async isClosable() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_closable\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const visible = await getCurrent().isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */ async isVisible() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|is_visible\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const title = await getCurrent().title();\n     * ```\n     */ async title() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|title\", {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * const theme = await getCurrent().theme();\n     * ```\n     *\n     * @returns The window theme.\n     */ async theme() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|theme\", {\n            label: this.label\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async center() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|center\", {\n            label: this.label\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().requestUserAttention();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = {\n                    type: \"Critical\"\n                };\n            } else {\n                requestType_ = {\n                    type: \"Informational\"\n                };\n            }\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|request_user_attention\", {\n            label: this.label,\n            value: requestType_\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setResizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setResizable(resizable) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_resizable\", {\n            label: this.label,\n            value: resizable\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setMaximizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setMaximizable(maximizable) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_maximizable\", {\n            label: this.label,\n            value: maximizable\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setMinimizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setMinimizable(minimizable) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_minimizable\", {\n            label: this.label,\n            value: minimizable\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setClosable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setClosable(closable) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_closable\", {\n            label: this.label,\n            value: closable\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setTitle(title) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_title\", {\n            label: this.label,\n            value: title\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async maximize() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|maximize\", {\n            label: this.label\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async unmaximize() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|unmaximize\", {\n            label: this.label\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async toggleMaximize() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|toggle_maximize\", {\n            label: this.label\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async minimize() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|minimize\", {\n            label: this.label\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async unminimize() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|unminimize\", {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async show() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|show\", {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async hide() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|hide\", {\n            label: this.label\n        });\n    }\n    /**\n     * Closes the window.\n     *\n     * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async close() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|close\", {\n            label: this.label\n        });\n    }\n    /**\n     * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().destroy();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async destroy() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|destroy\", {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setDecorations(decorations) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_decorations\", {\n            label: this.label,\n            value: decorations\n        });\n    }\n    /**\n     * Whether or not the window should have shadow.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:**\n     *   - `false` has no effect on decorated window, shadows are always ON.\n     *   - `true` will make ndecorated window have a 1px white border,\n     * and on Windows 11, it will have a rounded corners.\n     * - **Linux:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setShadow(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setShadow(enable) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_shadow\", {\n            label: this.label,\n            value: enable\n        });\n    }\n    /**\n     * Set window effects.\n     */ async setEffects(effects) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_effects\", {\n            label: this.label,\n            value: effects\n        });\n    }\n    /**\n     * Clear any applied effects if possible.\n     */ async clearEffects() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_effects\", {\n            label: this.label,\n            value: null\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setAlwaysOnTop(alwaysOnTop) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_always_on_top\", {\n            label: this.label,\n            value: alwaysOnTop\n        });\n    }\n    /**\n     * Whether the window should always be below other windows.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setAlwaysOnBottom(true);\n     * ```\n     *\n     * @param alwaysOnBottom Whether the window should always be below other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setAlwaysOnBottom(alwaysOnBottom) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_always_on_bottom\", {\n            label: this.label,\n            value: alwaysOnBottom\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setContentProtected(protected_) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_content_protected\", {\n            label: this.label,\n            value: protected_\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrent().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setSize(size) {\n        if (!size || size.type !== \"Logical\" && size.type !== \"Physical\") {\n            throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");\n        }\n        const value = {};\n        value[`${size.type}`] = {\n            width: size.width,\n            height: size.height\n        };\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_size\", {\n            label: this.label,\n            value\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrent, PhysicalSize } from '@tauri-apps/api/window';\n     * await getCurrent().setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setMinSize(size) {\n        if (size && size.type !== \"Logical\" && size.type !== \"Physical\") {\n            throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");\n        }\n        let value = null;\n        if (size) {\n            value = {};\n            value[`${size.type}`] = {\n                width: size.width,\n                height: size.height\n            };\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_min_size\", {\n            label: this.label,\n            value\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrent().setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setMaxSize(size) {\n        if (size && size.type !== \"Logical\" && size.type !== \"Physical\") {\n            throw new Error(\"the `size` argument must be either a LogicalSize or a PhysicalSize instance\");\n        }\n        let value = null;\n        if (size) {\n            value = {};\n            value[`${size.type}`] = {\n                width: size.width,\n                height: size.height\n            };\n        }\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_max_size\", {\n            label: this.label,\n            value\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrent().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setPosition(position) {\n        if (!position || position.type !== \"Logical\" && position.type !== \"Physical\") {\n            throw new Error(\"the `position` argument must be either a LogicalPosition or a PhysicalPosition instance\");\n        }\n        const value = {};\n        value[`${position.type}`] = {\n            x: position.x,\n            y: position.y\n        };\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_position\", {\n            label: this.label,\n            value\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setFullscreen(fullscreen) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_fullscreen\", {\n            label: this.label,\n            value: fullscreen\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setFocus() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_focus\", {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setIcon(icon) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_icon\", {\n            label: this.label,\n            value: (0,_image_js__WEBPACK_IMPORTED_MODULE_3__.transformImage)(icon)\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setSkipTaskbar(skip) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_skip_taskbar\", {\n            label: this.label,\n            value: skip\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setCursorGrab(grab) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_cursor_grab\", {\n            label: this.label,\n            value: grab\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setCursorVisible(visible) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_cursor_visible\", {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setCursorIcon(icon) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_cursor_icon\", {\n            label: this.label,\n            value: icon\n        });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrent().setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setCursorPosition(position) {\n        if (!position || position.type !== \"Logical\" && position.type !== \"Physical\") {\n            throw new Error(\"the `position` argument must be either a LogicalPosition or a PhysicalPosition instance\");\n        }\n        const value = {};\n        value[`${position.type}`] = {\n            x: position.x,\n            y: position.y\n        };\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_cursor_position\", {\n            label: this.label,\n            value\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */ async setIgnoreCursorEvents(ignore) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_ignore_cursor_events\", {\n            label: this.label,\n            value: ignore\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */ async startDragging() {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|start_dragging\", {\n            label: this.label\n        });\n    }\n    /**\n     * Starts resize-dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrent } from '@tauri-apps/api/window';\n     * await getCurrent().startResizeDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */ async startResizeDragging(direction) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|start_resize_dragging\", {\n            label: this.label,\n            value: direction\n        });\n    }\n    /**\n     * Sets the taskbar progress state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\n     * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent, ProgressBarStatus } from '@tauri-apps/api/window';\n     * await getCurrent().setProgressBar({\n     *   status: ProgressBarStatus.Normal,\n     *   progress: 50,\n     * });\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */ async setProgressBar(state) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_progress_bar\", {\n            label: this.label,\n            value: state\n        });\n    }\n    /**\n     * Sets whether the window should be visible on all workspaces or virtual desktops.\n     *\n     * ## Platform-specific\n     *\n     * - **Windows / iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */ async setVisibleOnAllWorkspaces(visible) {\n        return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|set_visible_on_all_workspaces\", {\n            label: this.label,\n            value: visible\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrent().onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async onResized(handler) {\n        return this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.WINDOW_RESIZED, (e)=>{\n            e.payload = mapPhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrent().onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async onMoved(handler) {\n        return this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.WINDOW_MOVED, (e)=>{\n            e.payload = mapPhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await getCurrent().onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ /* eslint-disable @typescript-eslint/promise-function-async */ async onCloseRequested(handler) {\n        return this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.WINDOW_CLOSE_REQUESTED, (event)=>{\n            const evt = new CloseRequestedEvent(event);\n            void Promise.resolve(handler(evt)).then(()=>{\n                if (!evt.isPreventDefault()) {\n                    return this.destroy();\n                }\n            });\n        });\n    }\n    /* eslint-enable */ /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrent().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'hover') {\n     *    console.log('User hovering', event.payload.paths);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async onDragDropEvent(handler) {\n        const unlistenDrag = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DRAG, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"dragged\",\n                    paths: event.payload.paths,\n                    position: mapPhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDrop = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DROP, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"dropped\",\n                    paths: event.payload.paths,\n                    position: mapPhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DROP_OVER, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"dragOver\",\n                    position: mapPhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenCancel = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.DROP_CANCELLED, (event)=>{\n            handler({\n                ...event,\n                payload: {\n                    type: \"cancelled\"\n                }\n            });\n        });\n        return ()=>{\n            unlistenDrag();\n            unlistenDrop();\n            unlistenDragOver();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrent().onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.WINDOW_FOCUS, (event)=>{\n            handler({\n                ...event,\n                payload: true\n            });\n        });\n        const unlistenBlur = await this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.WINDOW_BLUR, (event)=>{\n            handler({\n                ...event,\n                payload: false\n            });\n        });\n        return ()=>{\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrent().onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async onScaleChanged(handler) {\n        return this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrent } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrent().onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */ async onThemeChanged(handler) {\n        return this.listen(_event_js__WEBPACK_IMPORTED_MODULE_1__.TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * Platform-specific window effects\n *\n * @since 2.0.0\n */ var Effect;\n(function(Effect) {\n    /**\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n     */ Effect[\"AppearanceBased\"] = \"appearanceBased\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */ Effect[\"Light\"] = \"light\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */ Effect[\"Dark\"] = \"dark\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */ Effect[\"MediumLight\"] = \"mediumLight\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */ Effect[\"UltraDark\"] = \"ultraDark\";\n    /**\n     *  **macOS 10.10+**\n     */ Effect[\"Titlebar\"] = \"titlebar\";\n    /**\n     *  **macOS 10.10+**\n     */ Effect[\"Selection\"] = \"selection\";\n    /**\n     *  **macOS 10.11+**\n     */ Effect[\"Menu\"] = \"menu\";\n    /**\n     *  **macOS 10.11+**\n     */ Effect[\"Popover\"] = \"popover\";\n    /**\n     *  **macOS 10.11+**\n     */ Effect[\"Sidebar\"] = \"sidebar\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"HeaderView\"] = \"headerView\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"Sheet\"] = \"sheet\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"WindowBackground\"] = \"windowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"HudWindow\"] = \"hudWindow\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"Tooltip\"] = \"tooltip\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"ContentBackground\"] = \"contentBackground\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */ Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n    /**\n     *  **Windows 11 Only**\n     */ Effect[\"Mica\"] = \"mica\";\n    /**\n     * **Windows 7/10/11(22H1) Only**\n     *\n     * ## Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n     */ Effect[\"Blur\"] = \"blur\";\n    /**\n     * **Windows 10/11**\n     *\n     * ## Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n     */ Effect[\"Acrylic\"] = \"acrylic\";\n    /**\n     * Tabbed effect that matches the system dark perefence **Windows 11 Only**\n     */ Effect[\"Tabbed\"] = \"tabbed\";\n    /**\n     * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\n     */ Effect[\"TabbedDark\"] = \"tabbedDark\";\n    /**\n     * Tabbed effect with light mode **Windows 11 Only**\n     */ Effect[\"TabbedLight\"] = \"tabbedLight\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0.0\n */ var EffectState;\n(function(EffectState) {\n    /**\n     *  Make window effect state follow the window's active state **macOS only**\n     */ EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n    /**\n     *  Make window effect state always active **macOS only**\n     */ EffectState[\"Active\"] = \"active\";\n    /**\n     *  Make window effect state always inactive **macOS only**\n     */ EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n    return m === null ? null : {\n        name: m.name,\n        scaleFactor: m.scaleFactor,\n        position: mapPhysicalPosition(m.position),\n        size: mapPhysicalSize(m.size)\n    };\n}\nfunction mapPhysicalPosition(m) {\n    return new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalPosition(m.x, m.y);\n}\nfunction mapPhysicalSize(m) {\n    return new _dpi_js__WEBPACK_IMPORTED_MODULE_0__.PhysicalSize(m.width, m.height);\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */ async function currentMonitor() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|current_monitor\").then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */ async function primaryMonitor() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|primary_monitor\").then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */ async function availableMonitors() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|available_monitors\").then((ms)=>ms.map(mapMonitor));\n}\n/**\n * Get the cursor position relative to the top-left hand corner of the desktop.\n *\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\n * If the user uses a desktop with multiple monitors,\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\n * or the top-left of the leftmost monitor on X11.\n *\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\n */ async function cursorPosition() {\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_2__.invoke)(\"plugin:window|cursor_position\").then(mapPhysicalPosition);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@2.0.0-beta.11/node_modules/@tauri-apps/api/window.js\n");

/***/ })

};
;